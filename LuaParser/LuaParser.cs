
// LuaParser.cs - generated by the SLK parser generator 
using Dsl.Common;

namespace Lua.Parser
{

    class LuaParser
    {

private static short[] Production = {0

,2,51,52 ,3,52,108,109 ,2,53,59 ,2,53,54 ,18,54,149,150,1,151,152,153,52,154,150,2,151,152,155,80,154,156,55 
,8,54,149,150,3,151,152,153,61 ,2,54,58 ,2,54,4 ,3,55,56,55 
,2,55,54 ,9,56,149,150,157,152,155,149,94,57 ,12,57,156,110,6,154,150,158,152,155,79,154,156 
,5,57,154,156,154,156 ,8,58,149,150,159,152,69,154,156 ,8,58,149,150,7,151,152,154,156 
,10,58,149,150,8,151,152,155,71,154,156 ,11,58,149,150,9,151,152,153,52,10,154,156 
,15,58,149,150,11,151,152,155,80,9,160,153,52,10,154,156 
,17,58,149,150,12,151,152,155,80,13,160,153,52,111,112,10,154,156 
,11,58,149,150,16,151,152,155,71,63,154,156 ,13,58,149,150,17,151,152,155,70,154,150,75,154,156 
,9,59,149,150,157,152,155,149,93,60 ,13,60,156,113,6,154,150,158,152,155,79,154,156,55 
,6,60,154,156,154,156,55 ,15,61,149,150,17,151,152,155,71,154,150,75,154,156,154,156 
,11,61,149,150,157,152,155,64,154,114,62,55 ,5,62,154,156,154,156 
,16,63,6,154,150,161,152,155,80,5,80,115,9,160,153,52,10 
,13,63,116,150,18,151,152,155,79,9,160,153,52,10 ,3,64,65,117 
,10,65,149,150,162,152,155,71,66,154,156 ,2,66,118 ,4,67,68,154,156 
,9,68,149,150,21,151,152,155,119,120 ,5,69,22,164,71,22 
,4,70,71,121,122 ,8,71,149,150,23,151,152,154,156 ,8,72,149,150,24,165,152,154,156 
,8,73,149,150,25,166,152,154,156 ,12,74,149,150,17,151,152,155,154,150,75,154,156 
,11,75,167,152,155,26,123,27,160,153,52,10 ,3,76,71,124 
,2,76,77 ,8,77,149,150,28,151,152,154,156 ,3,78,5,76 
,3,79,80,125 ,3,80,81,156 ,2,80,74 ,2,80,77 ,3,81,82,126 
,3,82,83,127 ,3,83,84,128 ,3,84,85,129 ,3,85,86,130 
,3,86,87,131 ,3,87,88,132 ,3,88,89,133 ,3,89,90,134 
,3,90,91,135 ,7,91,149,39,151,168,92,156 ,2,91,92 ,4,92,149,93,136 
,2,93,94 ,2,93,96 ,6,94,150,107,152,137,95 ,2,95,154 
,4,96,150,97,154 ,6,97,155,26,138,27,139 ,6,97,153,41,140,42,141 
,2,98,97 ,6,98,169,43,80,44,142 ,4,98,24,99,143 ,4,98,25,100,144 
,8,99,170,149,150,107,171,154,156 ,8,100,172,149,150,107,171,154,156 
,3,101,103,145 ,3,102,106,146 ,14,103,149,150,169,43,80,44,154,156,6,151,168,80,156 
,2,103,104 ,6,104,149,150,23,152,105 ,5,104,149,96,156,147 
,6,104,39,151,168,92,156 ,2,104,74 ,2,104,77 ,8,105,154,156,6,151,168,80,156 
,5,105,98,154,156,148 ,2,106,5 ,2,106,4 ,3,107,23,151 
,3,107,45,173 ,3,107,46,174 ,3,107,47,151 ,3,107,48,151 
,3,107,49,151 ,3,108,53,108 ,1,108 ,2,109,67 ,1,109 ,6,110,5,149,93,156,110 
,1,110 ,12,111,154,150,14,152,155,80,13,160,153,52,111 ,1,111 
,7,112,154,150,15,152,153,52 ,1,112 ,6,113,5,149,93,156,113 
,1,113 ,7,114,6,150,158,152,155,79 ,1,114 ,3,115,5,80 
,1,115 ,4,116,5,71,116 ,2,116,154 ,4,117,5,65,117 ,1,117 
,9,118,19,149,150,163,71,154,156,20 ,1,118 ,2,119,79 ,1,119 
,2,120,4 ,1,120 ,4,121,72,71,121 ,1,121 ,3,122,73,71 
,1,122 ,2,123,76 ,1,123 ,2,124,78 ,1,124 ,4,125,5,80,125 
,1,125 ,7,126,29,151,168,82,156,126 ,1,126 ,7,127,30,151,168,83,156,127 
,1,127 ,7,128,31,151,168,84,156,128 ,1,128 ,7,129,32,151,168,85,156,129 
,1,129 ,7,130,33,151,168,86,156,130 ,1,130 ,7,131,34,151,168,87,156,131 
,1,131 ,7,132,35,151,168,88,156,132 ,1,132 ,7,133,36,151,168,89,156,133 
,1,133 ,7,134,37,151,168,90,156,134 ,1,134 ,7,135,38,151,168,91,156,135 
,1,135 ,8,136,40,151,168,149,93,156,136 ,1,136 ,2,137,98 
,1,137 ,2,138,79 ,1,138 ,3,139,160,98 ,1,139 ,2,140,101 
,1,140 ,3,141,160,98 ,1,141 ,3,142,160,98 ,1,142 ,3,143,160,98 
,1,143 ,3,144,160,98 ,1,144 ,2,145,102 ,1,145 ,2,146,101 
,1,146 ,7,147,29,151,168,82,156,147 ,1,147 ,7,148,29,151,168,82,156,148 
,1,148 
,0};

private static int[] Production_row = {0

,1,4,8,11,14,33,42,45,48,52,55,65,78,84,93,102
,113,125,141,159,171,185,195,209,216,232,244,250,267,281,285,296
,299,304,314,320,325,334,343,352,365,377,381,384,393,397,401,405
,408,411,415,419,423,427,431,435,439,443,447,451,459,462,467,470
,473,480,483,488,495,502,505,512,517,522,531,540,544,548,563,566
,573,579,586,589,592,601,607,610,613,617,621,625,629,633,637,641
,643,646,648,655,657,670,672,680,682,689,691,699,701,705,707,712
,715,720,722,732,734,737,739,742,744,749,751,755,757,760,762,765
,767,772,774,782,784,792,794,802,804,812,814,822,824,832,834,842
,844,852,854,862,864,872,874,883,885,888,890,893,895,899,901,904
,906,910,912,916,918,922,924,928,930,933,935,938,940,948,950,958

,0};

private static short[] Parse = {

0,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154
,77,77,88,87,154,154,153,153,153,154,30,154,154,154,154,154,154,154,154,154
,154,31,154,153,154,153,154,154,154,154,154,154,154,158,158,158,158,158,158,158
,158,158,158,158,158,158,158,158,158,158,121,122,122,33,158,158,157,157,157,158
,34,158,158,158,158,158,158,158,158,158,158,35,158,157,158,157,158,158,158,158
,158,158,158,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162
,99,100,105,106,162,162,161,161,161,162,36,162,162,162,162,162,162,162,162,162
,162,37,162,161,162,161,162,162,162,162,162,162,162,164,164,164,164,164,164,164
,164,164,164,164,164,164,164,164,164,164,123,124,38,39,164,164,163,163,163,164
,40,164,164,164,164,164,164,164,164,164,164,41,164,163,164,163,164,164,164,164
,164,164,164,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166
,44,45,0,0,166,166,165,165,165,166,0,166,166,166,166,166,166,166,166,166
,166,0,166,165,166,165,166,166,166,166,166,166,166,168,168,168,168,168,168,168
,168,168,168,168,168,168,168,168,168,168,0,0,0,0,168,168,167,167,167,168
,0,168,168,168,168,168,168,168,168,168,168,0,168,167,168,167,168,168,168,168
,168,168,168,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66
,0,0,0,0,66,66,72,73,70,66,0,66,66,66,66,66,66,66,66,66
,66,0,66,70,66,71,66,66,66,66,66,66,66,152,152,152,152,152,85,152
,152,152,152,152,152,152,152,152,152,152,169,169,0,0,152,152,86,86,86,152
,0,152,152,152,152,152,152,152,152,152,152,0,151,86,152,86,152,152,152,152
,152,152,152,150,150,150,150,150,170,150,150,150,150,150,150,150,150,150,150,150
,174,174,102,42,150,150,101,102,43,150,111,150,150,150,150,150,150,150,150,150
,149,0,0,112,150,173,150,150,150,150,150,150,150,148,148,148,148,148,174,148
,148,148,148,148,148,148,148,148,148,148,176,176,0,0,148,148,67,29,28,148
,0,148,148,148,148,148,148,148,148,147,29,67,0,0,148,175,148,148,148,148
,148,148,148,146,146,146,146,146,176,146,146,146,146,146,146,146,146,146,146,146
,127,0,125,0,146,146,126,125,68,146,0,146,146,146,146,146,146,146,145,25
,0,0,128,69,146,26,146,146,146,146,146,146,146,144,144,144,144,144,0,144
,144,144,144,144,144,144,144,144,144,144,0,104,0,109,144,144,103,110,0,144
,0,144,144,144,144,144,144,143,0,0,0,0,0,0,144,0,144,144,144,144
,144,144,144,142,142,142,142,142,0,142,142,142,142,142,142,142,142,142,142,142
,0,0,0,0,142,142,0,0,0,142,0,142,142,142,142,142,141,0,0,0
,0,0,0,0,142,0,142,142,142,142,142,142,142,140,140,140,140,140,0,140
,140,140,140,140,140,140,140,140,140,140,0,0,0,0,140,140,0,0,120,140
,119,140,140,140,140,139,120,0,0,0,120,120,0,0,140,0,140,140,140,140
,140,140,140,138,138,138,138,138,0,138,138,138,138,138,138,138,138,138,138,138
,0,0,0,0,138,138,120,0,0,138,0,138,138,138,137,0,0,0,0,0
,0,0,0,0,138,0,138,138,138,138,138,138,138,136,136,136,136,136,0,136
,136,136,136,136,136,136,136,136,136,136,0,0,98,0,136,136,0,0,0,136
,98,136,136,135,98,98,0,0,0,0,0,97,0,0,136,0,136,136,136,136
,136,136,136,134,134,134,134,134,0,134,134,134,134,134,134,134,134,134,134,134
,98,0,0,0,134,134,0,0,0,134,0,134,133,0,0,0,0,0,0,0
,0,0,0,0,134,0,134,134,134,134,134,134,134,132,132,132,132,132,0,132
,132,132,132,132,132,132,132,132,132,132,0,83,0,0,132,132,0,80,0,132
,81,131,84,0,0,0,0,0,0,0,0,0,0,82,132,81,132,132,132,132
,132,132,132,2,2,2,2,0,0,2,2,2,2,2,2,0,2,2,2,2
,0,0,0,2,2,2,0,0,2,15,16,17,0,18,19,0,0,0,20,21
,0,0,0,2,14,0,0,2,2,2,2,2,2,95,96,95,95,0,0,95
,95,95,96,95,95,11,96,96,95,95,159,0,0,96,95,95,159,0,95,159
,0,159,0,0,0,0,0,11,11,11,11,11,159,95,159,160,159,95,95,95
,95,95,96,130,130,130,130,129,0,130,130,130,130,130,130,0,130,130,130,130
,1,0,1,1,130,130,1,1,1,130,1,1,65,0,0,1,1,0,0,0
,1,1,1,0,0,1,0,130,130,130,130,130,130,0,65,65,65,65,65,0
,1,0,0,0,1,1,1,1,1,1,32,0,32,32,32,32,32,32,32,0
,32,32,0,0,0,32,32,5,32,6,8,32,32,7,7,7,0,7,7,0
,0,0,7,7,0,0,0,0,7,0,0,0,0,0,32,32,32,32,32,116
,0,116,116,116,116,116,116,116,0,116,116,0,0,0,116,116,4,115,4,4
,116,116,4,4,4,0,4,4,74,0,0,4,4,0,0,0,0,4,3,0
,0,3,0,116,116,116,116,116,0,0,74,74,74,74,74,0,3,0,0,0
,3,3,3,3,3,13,0,13,13,12,12,13,13,13,50,13,13,50,0,0
,13,13,171,0,0,0,13,13,171,0,50,171,50,171,0,0,50,50,50,50
,50,0,0,0,171,0,171,172,171,13,13,13,13,13,24,0,24,24,23,23
,24,24,24,51,24,24,51,0,0,24,24,76,0,0,0,24,24,76,0,51
,76,51,76,0,0,51,51,51,51,51,0,0,0,76,0,76,0,76,24,24
,24,24,24,114,0,114,114,113,114,114,114,114,52,114,114,52,0,0,114,114
,79,0,0,0,114,114,79,0,52,79,52,79,0,0,52,52,52,52,52,0
,0,0,79,0,79,0,78,114,114,114,114,114,108,0,108,108,0,107,108,108
,108,0,108,108,0,0,0,108,108,10,0,10,10,108,108,10,10,10,0,10
,10,0,0,0,10,10,53,0,0,53,10,9,0,0,0,0,108,108,108,108
,108,0,53,0,53,0,0,0,53,53,53,53,53,9,9,9,9,9,27,0
,27,27,0,0,27,27,27,0,27,27,118,0,118,27,27,75,0,0,118,27
,27,0,118,118,0,117,0,0,0,0,0,117,0,0,117,0,117,75,75,75
,75,75,27,27,27,27,27,117,0,117,89,0,0,117,117,117,117,117,118,155
,0,0,0,0,0,155,0,0,155,156,155,46,90,91,92,93,94,46,0,0
,46,155,46,155,0,0,0,155,155,155,155,155,0,46,0,46,0,0,48,46
,46,46,46,46,47,0,0,47,0,49,0,0,0,0,0,54,0,0,54,0
,47,0,47,0,0,0,47,47,47,47,47,54,55,54,0,55,0,54,54,54
,54,54,0,56,0,0,56,0,55,0,55,0,0,0,55,55,55,55,55,56
,57,56,0,57,0,56,56,56,56,56,0,58,0,0,58,0,57,0,57,0
,0,0,57,57,57,57,57,58,59,58,0,59,0,58,58,58,58,58,0,61
,0,0,61,0,59,0,59,0,0,0,59,59,59,59,59,60,22,61,0,22
,0,61,61,61,61,61,62,0,0,62,0,0,0,0,22,0,0,0,22,22
,22,22,22,63,62,0,64,0,62,62,62,62,62,0,0,0,0,0,0,0
,0,64,0,0,0,63,63,63,63,63,0
};

private static int[] Parse_row = {0

,1018,901,1134,1085,1347,941,1183,921,1592,1232,521,1396,471,6,17,1068
,51,58,68,106,117,147,147,162,164,399,191,215,1453,1480,1170,1219
,1268,1342,1491,1508,1519,1536,1547,1564,1575,1602,1619,1008,301,449,501,301
,1124,1391,1233,15,1282,853,351,17,1426,951,769,114,411,560,116,1330
,567,424,1281,1117,1407,675,45,144,498,514,1001,851,801,751,701,651
,601,551,501,451,401,351,1,1441,51,952,101,151,201,251,365,1184
,415,465
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private const short   END_OF_SLK_INPUT_ = 50;
private const short   START_SYMBOL = 51;
private const short   START_STATE = 0;
private const short   START_CONFLICT = 177;
private const short   END_CONFLICT = 177;
private const short   START_ACTION = 149;
private const short   END_ACTION = 175;
private const short   TOTAL_CONFLICTS = 0;

public const int   NOT_A_SYMBOL = 0;
public const int   NONTERMINAL_SYMBOL = 1;
public const int   TERMINAL_SYMBOL = 2;
public const int   ACTION_SYMBOL = 3;

public static short[]
GetProductionArray ( short  production_number )
{
   short   index = (short)  Production_row [ production_number ],
           array_length = (short)  Production [ index ],
           new_index = 0;
   short[] productionArray = new short[40];        

   while ( array_length-- >= 0 ) {
       productionArray [ new_index++ ] = Production [ index++ ];
   }
   return  productionArray;
}

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

public static bool    IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

public static bool    IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static bool    IsAction ( short   symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

public static short GetTerminalIndex ( short   token ){
 return ( token );
}

public static short
get_production ( short     conflict_number,
                 LuaToken  tokens )
{
    short   entry = 0;
    int     index, level;

    if ( conflict_number <= TOTAL_CONFLICTS ) {
        entry = (short) ( conflict_number + (START_CONFLICT - 1) );
        level = 1;
        while ( entry >= START_CONFLICT ) {
            index = Conflict_row [entry - (START_CONFLICT -1)];
            index += tokens.peek ( level );
            entry = Conflict [ index ];
            ++level;
        }
    }

    return  entry;
}

private static short
get_predicted_entry ( LuaToken   tokens,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

        internal unsafe static void
        parse(ref DslAction action,
                ref LuaToken tokens,
                ref LuaError error,
                short start_symbol)
        {
            short rhs, lhs;
            short production_number, entry, symbol, token, new_token;
            int production_length, top, index, level;

            short* stack = stackalloc short[65535];

            top = 65534;
            stack[top] = 0;
            if (start_symbol == 0) {
                start_symbol = START_SYMBOL;
            }
            if (top > 0) {
                stack[--top] = start_symbol;
            }
            else { error.message("LuaParse: stack overflow\n", ref tokens); return; }
            token = tokens.get();
            new_token = token;

            for (symbol = (stack[top] != 0 ? stack[top++] : (short)0); symbol != 0;) {

                if (symbol >= START_ACTION) {
                    action.execute(symbol - (START_ACTION - 1));

                }
                else if (symbol >= START_SYMBOL) {
                    entry = 0;
                    level = 1;
                    production_number = get_conditional_production(symbol);
                    if (production_number != 0) {
                        entry = get_predicted_entry(tokens,
                                                      production_number, token,
                                                      level, 1);
                    }
                    if (entry == 0) {
                        index = Parse_row[symbol - (START_SYMBOL - 1)];
                        index += token;
                        entry = Parse[index];
                    }
                    while (entry >= START_CONFLICT) {
                        index = Conflict_row[entry - (START_CONFLICT - 1)];
                        index += tokens.peek(level);
                        entry = Conflict[index];
                        ++level;
                    }
                    if (entry != 0) {
                        index = Production_row[entry];
                        production_length = Production[index] - 1;
                        lhs = Production[++index];
                        if (lhs == symbol) {
                            action.predict(entry);
                            index += production_length;
                            for (; production_length-- > 0; --index) {
                                if (top > 0) {
                                    stack[--top] = Production[index];
                                }
                                else { error.message("LuaParse: stack overflow\n", ref tokens); return; }
                            }
                        }
                        else {
                            new_token = error.no_entry(symbol, token, level - 1, ref tokens);
                        }
                    }
                    else {                                       // no table entry
                        new_token = error.no_entry(symbol, token, level - 1, ref tokens);
                    }
                }
                else if (symbol > 0) {
                    if (symbol == token) {
                        token = tokens.get();
                        new_token = token;
                    }
                    else {
                        new_token = error.mismatch(symbol, token, ref tokens);
                    }
                }
                else {
                    error.message("\n parser error: symbol value 0\n", ref tokens);
                }
                if (token != new_token) {
                    if (new_token != 0) {
                        token = new_token;
                    }
                    if (token != END_OF_SLK_INPUT_) {
                        continue;
                    }
                }
                symbol = (stack[top] != 0 ? stack[top++] : (short)0);
            }
            if (token != END_OF_SLK_INPUT_) {
                error.input_left(ref tokens);
            }
        }
    };
}
