
// CppString.cs - generated by the SLK parser generator 

namespace Cpp.Parser {

class CppString {

private static string[] Nonterminal_name ={"0"

,"TRANSLATION_UNIT"
,"DECLARATION"
,"CONSTRUCTOR"
,"MORE_CONSTRUCTOR"
,"BASE_LIST"
,"FUNCTION_OR_DECLARATION"
,"MORE_FUNCTION_OR_DECLARATION"
,"DECLARATION_SPECIFIER"
,"STORAGE_CLASS_SPECIFIER"
,"FUNCTION_SPECIFIER"
,"TYPE_SPECIFIER"
,"TYPE_QUALIFIER"
,"ACCESS_SPECIFIER"
,"STRUCT_OR_UNION_SPECIFIER"
,"STRUCT_OR_UNION"
,"QUALIFIED_ID"
,"QUALIFIED_ID_OR_TYPE"
,"QUALIFIED_TYPE"
,"ID_OR_TYPENAME"
,"ID_OR_TAGNAME"
,"BASE_CLAUSE"
,"INIT_DECLARATOR"
,"INIT_DECLARATOR_LIST2"
,"INIT_DECLARATOR2"
,"SPECIFIER_QUALIFIER"
,"ENUM_SPECIFIER"
,"ENUMERATOR_LIST"
,"ENUMERATOR"
,"DECLARATOR"
,"DIRECT_DECLARATOR"
,"MORE_DIRECT_DECLARATOR"
,"POINTER"
,"PARAMETER_TYPE_LIST"
,"PARAMETER_DECLARATION"
,"DECLARATOR_OR_ABSTRACT_DECLARATOR"
,"DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR"
,"MORE_DD_OR_DAD"
,"INITIALIZER"
,"INITIALIZER_LIST"
,"TYPE_NAME"
,"ABSTRACT_DECLARATOR"
,"DIRECT_ABSTRACT_DECLARATOR"
,"MORE_DIRECT_ABSTRACT_DECLARATOR"
,"STATEMENT"
,"LABELED_STATEMENT"
,"EXPRESSION_STATEMENT"
,"COMPOUND_STATEMENT"
,"SELECTION_STATEMENT"
,"MORE_IF"
,"ITERATION_STATEMENT"
,"JUMP_STATEMENT"
,"EXPRESSION"
,"ASSIGNMENT_EXPRESSION"
,"ASSIGNMENT_OPERATOR"
,"CONDITIONAL_EXPRESSION"
,"LOGICAL_OR_EXPRESSION"
,"LOGICAL_AND_EXPRESSION"
,"INCLUSIVE_OR_EXPRESSION"
,"EXCLUSIVE_OR_EXPRESSION"
,"AND_EXPRESSION"
,"EQUALITY_EXPRESSION"
,"EQUALITY_OP"
,"RELATIONAL_EXPRESSION"
,"RELATIONAL_OP"
,"SHIFT_EXPRESSION"
,"SHIFT_OP"
,"ADDITIVE_EXPRESSION"
,"ADDITIVE_OP"
,"MULTIPLICITIVE_EXPRESSION"
,"MULTIPLICITIVE_OP"
,"CAST_EXPRESSION"
,"UNARY_EXPRESSION"
,"UNARY_OPERATOR"
,"POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION"
,"PRIMARY_EXPRESSION"
,"ARGUMENT_EXPRESSION_LIST"
,"CONSTANT"
,"CONSTANT_EXPRESSION"
,"MUL_EXPRESSION"
,"UNARY_EXPR"
,"UNARY_OP"
,"DECLARATION_*"
,"DECLARATION_SPECIFIER_*"
,"DECLARATION_SPECIFIER_2_*"
,"INIT_DECLARATOR_LIST2_opt"
,"TYPEDEF_NAME_::_opt"
,"~_opt"
,"PARAMETER_TYPE_LIST_opt"
,"BASE_LIST_opt"
,"PARAMETER_TYPE_LIST_2_opt"
,"EXPRESSION_opt"
,"EXPRESSION_2_opt"
,",_QUALIFIED_ID_OR_TYPE_(_EXPRESSION_2_opt_)_*"
,"=_INITIALIZER_opt"
,",_INIT_DECLARATOR_*"
,"::_TYPEDEF_NAME_opt"
,"BASE_CLAUSE_opt"
,"DECLARATION_2_*"
,"BASE_CLAUSE_opt_{_DECLARATION_2_*_}_opt"
,"DECLARATION_3_*"
,"BASE_CLAUSE_2_opt"
,"DECLARATION_4_*"
,"BASE_CLAUSE_2_opt_{_DECLARATION_4_*_}_opt"
,"ID_OR_TYPENAME_::_*"
,"*_*"
,"ID_OR_TYPENAME_::_ID_OR_TYPENAME_::_*_*_*_opt"
,"ID_OR_TYPENAME_::_2_*"
,"ID_OR_TYPENAME_::_3_*"
,"ACCESS_SPECIFIER_opt"
,"ACCESS_SPECIFIER_2_opt"
,",_ACCESS_SPECIFIER_2_opt_QUALIFIED_ID_OR_TYPE_*"
,":_CONSTANT_EXPRESSION_opt"
,"=_INITIALIZER_2_opt"
,",_INIT_DECLARATOR2_*"
,"=_INITIALIZER_3_opt"
,"{_ENUMERATOR_LIST_}_opt"
,",_ENUMERATOR_*"
,"=_CONSTANT_EXPRESSION_opt"
,"=_CONSTANT_EXPRESSION_2_opt"
,"POINTER_opt"
,"CONSTANT_EXPRESSION_opt"
,"TYPE_QUALIFIER_opt"
,"POINTER_2_opt"
,",_PARAMETER_DECLARATION_*"
,",_..._opt"
,"DECLARATION_SPECIFIER_3_*"
,"DECLARATOR_OR_ABSTRACT_DECLARATOR_opt"
,"DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR_opt"
,"CONSTANT_EXPRESSION_2_opt"
,"PARAMETER_TYPE_LIST_3_opt"
,"CONSTANT_EXPRESSION_3_opt"
,",_opt"
,",_INITIALIZER_*"
,"SPECIFIER_QUALIFIER_*"
,"ABSTRACT_DECLARATOR_opt"
,"DIRECT_ABSTRACT_DECLARATOR_opt"
,"CONSTANT_EXPRESSION_4_opt"
,"PARAMETER_TYPE_LIST_4_opt"
,"CONSTANT_EXPRESSION_5_opt"
,"PARAMETER_TYPE_LIST_5_opt"
,"EXPRESSION_3_opt"
,"STATEMENT_*"
,"EXPRESSION_4_opt"
,"EXPRESSION_5_opt"
,"EXPRESSION_6_opt"
,"EXPRESSION_7_opt"
,",_ASSIGNMENT_EXPRESSION_*"
,"ASSIGNMENT_OPERATOR_ASSIGNMENT_EXPRESSION_opt"
,"?_EXPRESSION_:_CONDITIONAL_EXPRESSION_opt"
,"||_LOGICAL_AND_EXPRESSION_*"
,"&&_INCLUSIVE_OR_EXPRESSION_*"
,"|_EXCLUSIVE_OR_EXPRESSION_*"
,"^_AND_EXPRESSION_*"
,"&_EQUALITY_EXPRESSION_*"
,"EQUALITY_OP_RELATIONAL_EXPRESSION_*"
,"RELATIONAL_OP_SHIFT_EXPRESSION_*"
,"SHIFT_OP_ADDITIVE_EXPRESSION_*"
,"ADDITIVE_OP_MULTIPLICITIVE_EXPRESSION_*"
,"MULTIPLICITIVE_OP_CAST_EXPRESSION_*"
,"::_TYPEDEF_NAME_2_opt"
,"ARGUMENT_EXPRESSION_LIST_opt"
,"ARGUMENT_EXPRESSION_LIST_2_opt"
,"STRING_*"
,",_ASSIGNMENT_EXPRESSION_2_*"
,"ADDITIVE_OP_MUL_EXPRESSION_*"
,"MULTIPLICITIVE_OP_UNARY_EXPR_*"
};

private static string[] Terminal_name ={"0"

,"TYPEDEF"
,";"
,":"
,"USING"
,"TYPEDEF_NAME"
,"::"
,"~"
,"("
,")"
,"TAG_NAME"
,","
,"="
,"FRIEND"
,"AUTO"
,"REGISTER"
,"STATIC"
,"EXTERN"
,"MUTABLE"
,"INLINE"
,"VIRTUAL"
,"EXPLICIT"
,"VOID"
,"CHAR"
,"SHORT"
,"INT"
,"LONG"
,"FLOAT"
,"DOUBLE"
,"SIGNED"
,"UNSIGNED"
,"CONST"
,"VOLATILE"
,"PRIVATE"
,"PROTECTED"
,"PUBLIC"
,"{"
,"}"
,"CLASS"
,"STRUCT"
,"UNION"
,"*"
,"IDENTIFIER"
,"ENUM"
,"ENUM_NAME"
,"["
,"]"
,"_EPSILON_"
,"&"
,"..."
,"CASE"
,"DEFAULT"
,"IF"
,"SWITCH"
,"ELSE"
,"WHILE"
,"DO"
,"FOR"
,"GOTO"
,"CONTINUE"
,"BREAK"
,"RETURN"
,"*="
,"/="
,"%="
,"+="
,"-="
,"<<="
,">>="
,"&="
,"^="
,"|="
,"?"
,"||"
,"&&"
,"|"
,"^"
,"=="
,"!="
,"<"
,">"
,"<="
,">="
,"<<"
,">>"
,"+"
,"-"
,"/"
,"%"
,"++"
,"--"
,"SIZEOF"
,"NEW"
,"DELETE"
,"!"
,"."
,".*"
,"->"
,"->*"
,"STRING"
,"INTEGER_CONSTANT"
,"CHARACTER_CONSTANT"
,"FLOATING_CONSTANT"
,"ENUMERATION_CONSTANT"
,"END_OF_SLK_INPUT"
};

private static string[] Action_name ={"0"

,"__FINISHPARSE"
,"__SETTYPEDEFNAME"
,"__SETTAGNAME"
,"__SETENUMNAME"
,"__NEWSCOPE"
,"__RELEASESCOPE"
};

private static string[] Production_name ={"0"

,"TRANSLATION_UNIT --> DECLARATION_*"
,"DECLARATION --> DECLARATION_SPECIFIER DECLARATION_SPECIFIER_* FUNCTION_OR_DECLARATION"
,"DECLARATION --> CONSTRUCTOR"
,"DECLARATION --> TYPEDEF DECLARATION_SPECIFIER DECLARATION_SPECIFIER_2_* INIT_DECLARATOR_LIST2_opt ;"
,"DECLARATION --> ACCESS_SPECIFIER :"
,"DECLARATION --> USING QUALIFIED_TYPE ;"
,"CONSTRUCTOR --> TYPEDEF_NAME_::_opt ~_opt TYPEDEF_NAME ( PARAMETER_TYPE_LIST_opt ) BASE_LIST_opt MORE_CONSTRUCTOR"
,"CONSTRUCTOR --> TAG_NAME ( PARAMETER_TYPE_LIST_2_opt ) MORE_CONSTRUCTOR"
,"MORE_CONSTRUCTOR --> COMPOUND_STATEMENT"
,"MORE_CONSTRUCTOR --> ;"
,"BASE_LIST --> : QUALIFIED_ID_OR_TYPE ( EXPRESSION_opt ) ,_QUALIFIED_ID_OR_TYPE_(_EXPRESSION_2_opt_)_*"
,"FUNCTION_OR_DECLARATION --> DECLARATOR MORE_FUNCTION_OR_DECLARATION"
,"FUNCTION_OR_DECLARATION --> ;"
,"MORE_FUNCTION_OR_DECLARATION --> COMPOUND_STATEMENT"
,"MORE_FUNCTION_OR_DECLARATION --> =_INITIALIZER_opt ,_INIT_DECLARATOR_* ;"
,"DECLARATION_SPECIFIER --> STORAGE_CLASS_SPECIFIER"
,"DECLARATION_SPECIFIER --> TYPE_SPECIFIER"
,"DECLARATION_SPECIFIER --> TYPE_QUALIFIER"
,"DECLARATION_SPECIFIER --> ACCESS_SPECIFIER"
,"DECLARATION_SPECIFIER --> FUNCTION_SPECIFIER"
,"DECLARATION_SPECIFIER --> FRIEND"
,"STORAGE_CLASS_SPECIFIER --> AUTO"
,"STORAGE_CLASS_SPECIFIER --> REGISTER"
,"STORAGE_CLASS_SPECIFIER --> STATIC"
,"STORAGE_CLASS_SPECIFIER --> EXTERN"
,"STORAGE_CLASS_SPECIFIER --> MUTABLE"
,"FUNCTION_SPECIFIER --> INLINE"
,"FUNCTION_SPECIFIER --> VIRTUAL"
,"FUNCTION_SPECIFIER --> EXPLICIT"
,"TYPE_SPECIFIER --> VOID"
,"TYPE_SPECIFIER --> CHAR"
,"TYPE_SPECIFIER --> SHORT"
,"TYPE_SPECIFIER --> INT"
,"TYPE_SPECIFIER --> LONG"
,"TYPE_SPECIFIER --> FLOAT"
,"TYPE_SPECIFIER --> DOUBLE"
,"TYPE_SPECIFIER --> SIGNED"
,"TYPE_SPECIFIER --> UNSIGNED"
,"TYPE_SPECIFIER --> TYPEDEF_NAME ::_TYPEDEF_NAME_opt"
,"TYPE_SPECIFIER --> STRUCT_OR_UNION_SPECIFIER"
,"TYPE_SPECIFIER --> ENUM_SPECIFIER"
,"TYPE_QUALIFIER --> CONST"
,"TYPE_QUALIFIER --> VOLATILE"
,"ACCESS_SPECIFIER --> PRIVATE"
,"ACCESS_SPECIFIER --> PROTECTED"
,"ACCESS_SPECIFIER --> PUBLIC"
,"STRUCT_OR_UNION_SPECIFIER --> STRUCT_OR_UNION ID_OR_TAGNAME BASE_CLAUSE_opt_{_DECLARATION_2_*_}_opt"
,"STRUCT_OR_UNION_SPECIFIER --> STRUCT_OR_UNION { DECLARATION_3_* }"
,"STRUCT_OR_UNION_SPECIFIER --> CLASS ID_OR_TYPENAME BASE_CLAUSE_2_opt_{_DECLARATION_4_*_}_opt"
,"STRUCT_OR_UNION --> STRUCT"
,"STRUCT_OR_UNION --> UNION"
,"QUALIFIED_ID --> ID_OR_TYPENAME_::_ID_OR_TYPENAME_::_*_*_*_opt IDENTIFIER"
,"QUALIFIED_ID_OR_TYPE --> ID_OR_TYPENAME_::_2_* ID_OR_TYPENAME"
,"QUALIFIED_TYPE --> ID_OR_TYPENAME_::_3_* TYPEDEF_NAME"
,"ID_OR_TYPENAME --> TYPEDEF_NAME"
,"ID_OR_TYPENAME --> __SETTYPEDEFNAME IDENTIFIER"
,"ID_OR_TAGNAME --> TAG_NAME"
,"ID_OR_TAGNAME --> __SETTAGNAME IDENTIFIER"
,"BASE_CLAUSE --> : ACCESS_SPECIFIER_opt QUALIFIED_ID_OR_TYPE ,_ACCESS_SPECIFIER_2_opt_QUALIFIED_ID_OR_TYPE_*"
,"INIT_DECLARATOR --> DECLARATOR :_CONSTANT_EXPRESSION_opt =_INITIALIZER_2_opt"
,"INIT_DECLARATOR --> : CONSTANT_EXPRESSION"
,"INIT_DECLARATOR_LIST2 --> INIT_DECLARATOR2 ,_INIT_DECLARATOR2_*"
,"INIT_DECLARATOR2 --> DECLARATOR __SETTYPEDEFNAME =_INITIALIZER_3_opt"
,"SPECIFIER_QUALIFIER --> TYPE_SPECIFIER"
,"SPECIFIER_QUALIFIER --> TYPE_QUALIFIER"
,"ENUM_SPECIFIER --> ENUM { ENUMERATOR_LIST }"
,"ENUM_SPECIFIER --> ENUM IDENTIFIER {_ENUMERATOR_LIST_}_opt"
,"ENUMERATOR_LIST --> ENUMERATOR ,_ENUMERATOR_*"
,"ENUMERATOR --> IDENTIFIER __SETENUMNAME =_CONSTANT_EXPRESSION_opt"
,"ENUMERATOR --> ENUM_NAME =_CONSTANT_EXPRESSION_2_opt"
,"DECLARATOR --> POINTER_opt DIRECT_DECLARATOR"
,"DIRECT_DECLARATOR --> QUALIFIED_ID MORE_DIRECT_DECLARATOR"
,"DIRECT_DECLARATOR --> ( DECLARATOR ) MORE_DIRECT_DECLARATOR"
,"MORE_DIRECT_DECLARATOR --> [ CONSTANT_EXPRESSION_opt ] MORE_DIRECT_DECLARATOR"
,"MORE_DIRECT_DECLARATOR --> __NEWSCOPE ( PARAMETER_TYPE_LIST ) __RELEASESCOPE MORE_DIRECT_DECLARATOR"
,"MORE_DIRECT_DECLARATOR --> ( EXPRESSION ) MORE_DIRECT_DECLARATOR"
,"MORE_DIRECT_DECLARATOR --> ( ) MORE_DIRECT_DECLARATOR"
,"MORE_DIRECT_DECLARATOR --> _EPSILON_"
,"POINTER --> * TYPE_QUALIFIER_opt POINTER_2_opt"
,"POINTER --> &"
,"PARAMETER_TYPE_LIST --> PARAMETER_DECLARATION ,_PARAMETER_DECLARATION_* ,_..._opt"
,"PARAMETER_DECLARATION --> DECLARATION_SPECIFIER DECLARATION_SPECIFIER_3_* DECLARATOR_OR_ABSTRACT_DECLARATOR_opt"
,"DECLARATOR_OR_ABSTRACT_DECLARATOR --> DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR"
,"DECLARATOR_OR_ABSTRACT_DECLARATOR --> POINTER DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR_opt"
,"DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR --> QUALIFIED_ID MORE_DD_OR_DAD"
,"DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR --> ( DECLARATOR_OR_ABSTRACT_DECLARATOR ) MORE_DD_OR_DAD"
,"DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR --> [ CONSTANT_EXPRESSION_2_opt ] MORE_DD_OR_DAD"
,"DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR --> ( PARAMETER_TYPE_LIST_3_opt ) MORE_DD_OR_DAD"
,"MORE_DD_OR_DAD --> [ CONSTANT_EXPRESSION_3_opt ] MORE_DD_OR_DAD"
,"MORE_DD_OR_DAD --> ( PARAMETER_TYPE_LIST ) MORE_DD_OR_DAD"
,"MORE_DD_OR_DAD --> ( EXPRESSION ) MORE_DD_OR_DAD"
,"MORE_DD_OR_DAD --> ( ) MORE_DD_OR_DAD"
,"MORE_DD_OR_DAD --> _EPSILON_"
,"INITIALIZER --> ASSIGNMENT_EXPRESSION"
,"INITIALIZER --> { INITIALIZER_LIST ,_opt }"
,"INITIALIZER_LIST --> INITIALIZER ,_INITIALIZER_*"
,"TYPE_NAME --> SPECIFIER_QUALIFIER SPECIFIER_QUALIFIER_* ABSTRACT_DECLARATOR_opt"
,"ABSTRACT_DECLARATOR --> POINTER DIRECT_ABSTRACT_DECLARATOR_opt"
,"ABSTRACT_DECLARATOR --> DIRECT_ABSTRACT_DECLARATOR"
,"DIRECT_ABSTRACT_DECLARATOR --> ( ABSTRACT_DECLARATOR ) MORE_DIRECT_ABSTRACT_DECLARATOR"
,"DIRECT_ABSTRACT_DECLARATOR --> [ CONSTANT_EXPRESSION_4_opt ] MORE_DIRECT_ABSTRACT_DECLARATOR"
,"DIRECT_ABSTRACT_DECLARATOR --> ( PARAMETER_TYPE_LIST_4_opt ) MORE_DIRECT_ABSTRACT_DECLARATOR"
,"MORE_DIRECT_ABSTRACT_DECLARATOR --> [ CONSTANT_EXPRESSION_5_opt ] MORE_DIRECT_ABSTRACT_DECLARATOR"
,"MORE_DIRECT_ABSTRACT_DECLARATOR --> ( PARAMETER_TYPE_LIST_5_opt ) MORE_DIRECT_ABSTRACT_DECLARATOR"
,"MORE_DIRECT_ABSTRACT_DECLARATOR --> _EPSILON_"
,"STATEMENT --> LABELED_STATEMENT"
,"STATEMENT --> EXPRESSION_STATEMENT"
,"STATEMENT --> COMPOUND_STATEMENT"
,"STATEMENT --> SELECTION_STATEMENT"
,"STATEMENT --> ITERATION_STATEMENT"
,"STATEMENT --> JUMP_STATEMENT"
,"STATEMENT --> DECLARATION"
,"LABELED_STATEMENT --> IDENTIFIER : STATEMENT"
,"LABELED_STATEMENT --> CASE CONSTANT_EXPRESSION : STATEMENT"
,"LABELED_STATEMENT --> DEFAULT : STATEMENT"
,"EXPRESSION_STATEMENT --> EXPRESSION_3_opt ;"
,"COMPOUND_STATEMENT --> __NEWSCOPE { STATEMENT_* } __RELEASESCOPE"
,"SELECTION_STATEMENT --> IF ( EXPRESSION ) STATEMENT MORE_IF"
,"SELECTION_STATEMENT --> SWITCH ( EXPRESSION ) STATEMENT"
,"MORE_IF --> ELSE STATEMENT"
,"MORE_IF --> _EPSILON_"
,"ITERATION_STATEMENT --> WHILE ( EXPRESSION ) STATEMENT"
,"ITERATION_STATEMENT --> DO STATEMENT WHILE ( EXPRESSION ) ;"
,"ITERATION_STATEMENT --> FOR ( EXPRESSION_4_opt ; EXPRESSION_5_opt ; EXPRESSION_6_opt ) STATEMENT"
,"JUMP_STATEMENT --> GOTO IDENTIFIER ;"
,"JUMP_STATEMENT --> CONTINUE ;"
,"JUMP_STATEMENT --> BREAK ;"
,"JUMP_STATEMENT --> RETURN EXPRESSION_7_opt ;"
,"EXPRESSION --> ASSIGNMENT_EXPRESSION ,_ASSIGNMENT_EXPRESSION_*"
,"ASSIGNMENT_EXPRESSION --> CONDITIONAL_EXPRESSION ASSIGNMENT_OPERATOR_ASSIGNMENT_EXPRESSION_opt"
,"ASSIGNMENT_OPERATOR --> ="
,"ASSIGNMENT_OPERATOR --> *="
,"ASSIGNMENT_OPERATOR --> /="
,"ASSIGNMENT_OPERATOR --> %="
,"ASSIGNMENT_OPERATOR --> +="
,"ASSIGNMENT_OPERATOR --> -="
,"ASSIGNMENT_OPERATOR --> <<="
,"ASSIGNMENT_OPERATOR --> >>="
,"ASSIGNMENT_OPERATOR --> &="
,"ASSIGNMENT_OPERATOR --> ^="
,"ASSIGNMENT_OPERATOR --> |="
,"CONDITIONAL_EXPRESSION --> LOGICAL_OR_EXPRESSION ?_EXPRESSION_:_CONDITIONAL_EXPRESSION_opt"
,"LOGICAL_OR_EXPRESSION --> LOGICAL_AND_EXPRESSION ||_LOGICAL_AND_EXPRESSION_*"
,"LOGICAL_AND_EXPRESSION --> INCLUSIVE_OR_EXPRESSION &&_INCLUSIVE_OR_EXPRESSION_*"
,"INCLUSIVE_OR_EXPRESSION --> EXCLUSIVE_OR_EXPRESSION |_EXCLUSIVE_OR_EXPRESSION_*"
,"EXCLUSIVE_OR_EXPRESSION --> AND_EXPRESSION ^_AND_EXPRESSION_*"
,"AND_EXPRESSION --> EQUALITY_EXPRESSION &_EQUALITY_EXPRESSION_*"
,"EQUALITY_EXPRESSION --> RELATIONAL_EXPRESSION EQUALITY_OP_RELATIONAL_EXPRESSION_*"
,"EQUALITY_OP --> =="
,"EQUALITY_OP --> !="
,"RELATIONAL_EXPRESSION --> SHIFT_EXPRESSION RELATIONAL_OP_SHIFT_EXPRESSION_*"
,"RELATIONAL_OP --> <"
,"RELATIONAL_OP --> >"
,"RELATIONAL_OP --> <="
,"RELATIONAL_OP --> >="
,"SHIFT_EXPRESSION --> ADDITIVE_EXPRESSION SHIFT_OP_ADDITIVE_EXPRESSION_*"
,"SHIFT_OP --> <<"
,"SHIFT_OP --> >>"
,"ADDITIVE_EXPRESSION --> MULTIPLICITIVE_EXPRESSION ADDITIVE_OP_MULTIPLICITIVE_EXPRESSION_*"
,"ADDITIVE_OP --> +"
,"ADDITIVE_OP --> -"
,"MULTIPLICITIVE_EXPRESSION --> CAST_EXPRESSION MULTIPLICITIVE_OP_CAST_EXPRESSION_*"
,"MULTIPLICITIVE_OP --> *"
,"MULTIPLICITIVE_OP --> /"
,"MULTIPLICITIVE_OP --> %"
,"CAST_EXPRESSION --> UNARY_EXPRESSION"
,"CAST_EXPRESSION --> ( TYPE_NAME ) CAST_EXPRESSION"
,"UNARY_EXPRESSION --> POSTFIX_EXPRESSION"
,"UNARY_EXPRESSION --> ++ UNARY_EXPRESSION"
,"UNARY_EXPRESSION --> -- UNARY_EXPRESSION"
,"UNARY_EXPRESSION --> UNARY_OPERATOR CAST_EXPRESSION"
,"UNARY_EXPRESSION --> SIZEOF UNARY_EXPRESSION"
,"UNARY_EXPRESSION --> SIZEOF ( TYPE_NAME )"
,"UNARY_EXPRESSION --> NEW TYPEDEF_NAME ::_TYPEDEF_NAME_2_opt ( ARGUMENT_EXPRESSION_LIST_opt )"
,"UNARY_EXPRESSION --> NEW ( TYPE_NAME )"
,"UNARY_EXPRESSION --> DELETE CAST_EXPRESSION"
,"UNARY_EXPRESSION --> DELETE [ ] CAST_EXPRESSION"
,"UNARY_OPERATOR --> &"
,"UNARY_OPERATOR --> *"
,"UNARY_OPERATOR --> +"
,"UNARY_OPERATOR --> -"
,"UNARY_OPERATOR --> ~"
,"UNARY_OPERATOR --> !"
,"POSTFIX_EXPRESSION --> PRIMARY_EXPRESSION MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> [ EXPRESSION ] MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> ( ARGUMENT_EXPRESSION_LIST_2_opt ) MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> . IDENTIFIER MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> .* IDENTIFIER MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> -> IDENTIFIER MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> ->* IDENTIFIER MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> ++ MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> -- MORE_POSTFIX_EXPRESSION"
,"MORE_POSTFIX_EXPRESSION --> _EPSILON_"
,"PRIMARY_EXPRESSION --> QUALIFIED_ID"
,"PRIMARY_EXPRESSION --> CONSTANT"
,"PRIMARY_EXPRESSION --> STRING STRING_*"
,"PRIMARY_EXPRESSION --> ( EXPRESSION )"
,"ARGUMENT_EXPRESSION_LIST --> ASSIGNMENT_EXPRESSION ,_ASSIGNMENT_EXPRESSION_2_*"
,"CONSTANT --> INTEGER_CONSTANT"
,"CONSTANT --> CHARACTER_CONSTANT"
,"CONSTANT --> FLOATING_CONSTANT"
,"CONSTANT --> ENUMERATION_CONSTANT"
,"CONSTANT --> ENUM_NAME"
,"CONSTANT_EXPRESSION --> MUL_EXPRESSION ADDITIVE_OP_MUL_EXPRESSION_*"
,"MUL_EXPRESSION --> UNARY_EXPR MULTIPLICITIVE_OP_UNARY_EXPR_*"
,"UNARY_EXPR --> CONSTANT"
,"UNARY_EXPR --> UNARY_OP UNARY_EXPR"
,"UNARY_EXPR --> ( CONSTANT_EXPRESSION )"
,"UNARY_EXPR --> SIZEOF UNARY_EXPR"
,"UNARY_EXPR --> SIZEOF ( TYPE_NAME )"
,"UNARY_OP --> *"
,"UNARY_OP --> +"
,"UNARY_OP --> -"
,"UNARY_OP --> ~"
,"UNARY_OP --> !"
,"DECLARATION_* --> DECLARATION DECLARATION_*"
,"DECLARATION_* --> __FINISHPARSE"
,"DECLARATION_SPECIFIER_* --> DECLARATION_SPECIFIER DECLARATION_SPECIFIER_*"
,"DECLARATION_SPECIFIER_* -->"
,"DECLARATION_SPECIFIER_2_* --> DECLARATION_SPECIFIER DECLARATION_SPECIFIER_2_*"
,"DECLARATION_SPECIFIER_2_* -->"
,"INIT_DECLARATOR_LIST2_opt --> INIT_DECLARATOR_LIST2"
,"INIT_DECLARATOR_LIST2_opt -->"
,"TYPEDEF_NAME_::_opt --> TYPEDEF_NAME ::"
,"TYPEDEF_NAME_::_opt -->"
,"~_opt --> ~"
,"~_opt -->"
,"PARAMETER_TYPE_LIST_opt --> PARAMETER_TYPE_LIST"
,"PARAMETER_TYPE_LIST_opt -->"
,"BASE_LIST_opt --> BASE_LIST"
,"BASE_LIST_opt -->"
,"PARAMETER_TYPE_LIST_2_opt --> PARAMETER_TYPE_LIST"
,"PARAMETER_TYPE_LIST_2_opt -->"
,"EXPRESSION_opt --> EXPRESSION"
,"EXPRESSION_opt -->"
,"EXPRESSION_2_opt --> EXPRESSION"
,"EXPRESSION_2_opt -->"
,",_QUALIFIED_ID_OR_TYPE_(_EXPRESSION_2_opt_)_* --> , QUALIFIED_ID_OR_TYPE ( EXPRESSION_2_opt ) ,_QUALIFIED_ID_OR_TYPE_(_EXPRESSION_2_opt_)_*"
,",_QUALIFIED_ID_OR_TYPE_(_EXPRESSION_2_opt_)_* -->"
,"=_INITIALIZER_opt --> = INITIALIZER"
,"=_INITIALIZER_opt -->"
,",_INIT_DECLARATOR_* --> , INIT_DECLARATOR ,_INIT_DECLARATOR_*"
,",_INIT_DECLARATOR_* -->"
,"::_TYPEDEF_NAME_opt --> :: TYPEDEF_NAME"
,"::_TYPEDEF_NAME_opt -->"
,"BASE_CLAUSE_opt --> BASE_CLAUSE"
,"BASE_CLAUSE_opt -->"
,"DECLARATION_2_* --> DECLARATION DECLARATION_2_*"
,"DECLARATION_2_* -->"
,"BASE_CLAUSE_opt_{_DECLARATION_2_*_}_opt --> BASE_CLAUSE_opt { DECLARATION_2_* }"
,"BASE_CLAUSE_opt_{_DECLARATION_2_*_}_opt -->"
,"DECLARATION_3_* --> DECLARATION DECLARATION_3_*"
,"DECLARATION_3_* -->"
,"BASE_CLAUSE_2_opt --> BASE_CLAUSE"
,"BASE_CLAUSE_2_opt -->"
,"DECLARATION_4_* --> DECLARATION DECLARATION_4_*"
,"DECLARATION_4_* -->"
,"BASE_CLAUSE_2_opt_{_DECLARATION_4_*_}_opt --> BASE_CLAUSE_2_opt { DECLARATION_4_* }"
,"BASE_CLAUSE_2_opt_{_DECLARATION_4_*_}_opt -->"
,"ID_OR_TYPENAME_::_* --> ID_OR_TYPENAME :: ID_OR_TYPENAME_::_*"
,"ID_OR_TYPENAME_::_* -->"
,"*_* --> * *_*"
,"*_* -->"
,"ID_OR_TYPENAME_::_ID_OR_TYPENAME_::_*_*_*_opt --> ID_OR_TYPENAME :: ID_OR_TYPENAME_::_* *_*"
,"ID_OR_TYPENAME_::_ID_OR_TYPENAME_::_*_*_*_opt -->"
,"ID_OR_TYPENAME_::_2_* --> ID_OR_TYPENAME :: ID_OR_TYPENAME_::_2_*"
,"ID_OR_TYPENAME_::_2_* -->"
,"ID_OR_TYPENAME_::_3_* --> ID_OR_TYPENAME :: ID_OR_TYPENAME_::_3_*"
,"ID_OR_TYPENAME_::_3_* -->"
,"ACCESS_SPECIFIER_opt --> ACCESS_SPECIFIER"
,"ACCESS_SPECIFIER_opt -->"
,"ACCESS_SPECIFIER_2_opt --> ACCESS_SPECIFIER"
,"ACCESS_SPECIFIER_2_opt -->"
,",_ACCESS_SPECIFIER_2_opt_QUALIFIED_ID_OR_TYPE_* --> , ACCESS_SPECIFIER_2_opt QUALIFIED_ID_OR_TYPE ,_ACCESS_SPECIFIER_2_opt_QUALIFIED_ID_OR_TYPE_*"
,",_ACCESS_SPECIFIER_2_opt_QUALIFIED_ID_OR_TYPE_* -->"
,":_CONSTANT_EXPRESSION_opt --> : CONSTANT_EXPRESSION"
,":_CONSTANT_EXPRESSION_opt -->"
,"=_INITIALIZER_2_opt --> = INITIALIZER"
,"=_INITIALIZER_2_opt -->"
,",_INIT_DECLARATOR2_* --> , INIT_DECLARATOR2 ,_INIT_DECLARATOR2_*"
,",_INIT_DECLARATOR2_* -->"
,"=_INITIALIZER_3_opt --> = INITIALIZER"
,"=_INITIALIZER_3_opt -->"
,"{_ENUMERATOR_LIST_}_opt --> { ENUMERATOR_LIST }"
,"{_ENUMERATOR_LIST_}_opt -->"
,",_ENUMERATOR_* --> , ENUMERATOR ,_ENUMERATOR_*"
,",_ENUMERATOR_* -->"
,"=_CONSTANT_EXPRESSION_opt --> = CONSTANT_EXPRESSION"
,"=_CONSTANT_EXPRESSION_opt -->"
,"=_CONSTANT_EXPRESSION_2_opt --> = CONSTANT_EXPRESSION"
,"=_CONSTANT_EXPRESSION_2_opt -->"
,"POINTER_opt --> POINTER"
,"POINTER_opt -->"
,"CONSTANT_EXPRESSION_opt --> CONSTANT_EXPRESSION"
,"CONSTANT_EXPRESSION_opt -->"
,"TYPE_QUALIFIER_opt --> TYPE_QUALIFIER"
,"TYPE_QUALIFIER_opt -->"
,"POINTER_2_opt --> POINTER"
,"POINTER_2_opt -->"
,",_PARAMETER_DECLARATION_* --> , PARAMETER_DECLARATION ,_PARAMETER_DECLARATION_*"
,",_PARAMETER_DECLARATION_* -->"
,",_..._opt --> , ..."
,",_..._opt -->"
,"DECLARATION_SPECIFIER_3_* --> DECLARATION_SPECIFIER DECLARATION_SPECIFIER_3_*"
,"DECLARATION_SPECIFIER_3_* -->"
,"DECLARATOR_OR_ABSTRACT_DECLARATOR_opt --> DECLARATOR_OR_ABSTRACT_DECLARATOR"
,"DECLARATOR_OR_ABSTRACT_DECLARATOR_opt -->"
,"DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR_opt --> DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR"
,"DIRECT_DECLARATOR_OR_DIRECT_ABSTRACT_DECLARATOR_opt -->"
,"CONSTANT_EXPRESSION_2_opt --> CONSTANT_EXPRESSION"
,"CONSTANT_EXPRESSION_2_opt -->"
,"PARAMETER_TYPE_LIST_3_opt --> PARAMETER_TYPE_LIST"
,"PARAMETER_TYPE_LIST_3_opt -->"
,"CONSTANT_EXPRESSION_3_opt --> CONSTANT_EXPRESSION"
,"CONSTANT_EXPRESSION_3_opt -->"
,",_opt --> ,"
,",_opt -->"
,",_INITIALIZER_* --> , INITIALIZER ,_INITIALIZER_*"
,",_INITIALIZER_* -->"
,"SPECIFIER_QUALIFIER_* --> SPECIFIER_QUALIFIER SPECIFIER_QUALIFIER_*"
,"SPECIFIER_QUALIFIER_* -->"
,"ABSTRACT_DECLARATOR_opt --> ABSTRACT_DECLARATOR"
,"ABSTRACT_DECLARATOR_opt -->"
,"DIRECT_ABSTRACT_DECLARATOR_opt --> DIRECT_ABSTRACT_DECLARATOR"
,"DIRECT_ABSTRACT_DECLARATOR_opt -->"
,"CONSTANT_EXPRESSION_4_opt --> CONSTANT_EXPRESSION"
,"CONSTANT_EXPRESSION_4_opt -->"
,"PARAMETER_TYPE_LIST_4_opt --> PARAMETER_TYPE_LIST"
,"PARAMETER_TYPE_LIST_4_opt -->"
,"CONSTANT_EXPRESSION_5_opt --> CONSTANT_EXPRESSION"
,"CONSTANT_EXPRESSION_5_opt -->"
,"PARAMETER_TYPE_LIST_5_opt --> PARAMETER_TYPE_LIST"
,"PARAMETER_TYPE_LIST_5_opt -->"
,"EXPRESSION_3_opt --> EXPRESSION"
,"EXPRESSION_3_opt -->"
,"STATEMENT_* --> STATEMENT STATEMENT_*"
,"STATEMENT_* -->"
,"EXPRESSION_4_opt --> EXPRESSION"
,"EXPRESSION_4_opt -->"
,"EXPRESSION_5_opt --> EXPRESSION"
,"EXPRESSION_5_opt -->"
,"EXPRESSION_6_opt --> EXPRESSION"
,"EXPRESSION_6_opt -->"
,"EXPRESSION_7_opt --> EXPRESSION"
,"EXPRESSION_7_opt -->"
,",_ASSIGNMENT_EXPRESSION_* --> , ASSIGNMENT_EXPRESSION ,_ASSIGNMENT_EXPRESSION_*"
,",_ASSIGNMENT_EXPRESSION_* -->"
,"ASSIGNMENT_OPERATOR_ASSIGNMENT_EXPRESSION_opt --> ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION"
,"ASSIGNMENT_OPERATOR_ASSIGNMENT_EXPRESSION_opt -->"
,"?_EXPRESSION_:_CONDITIONAL_EXPRESSION_opt --> ? EXPRESSION : CONDITIONAL_EXPRESSION"
,"?_EXPRESSION_:_CONDITIONAL_EXPRESSION_opt -->"
,"||_LOGICAL_AND_EXPRESSION_* --> || LOGICAL_AND_EXPRESSION ||_LOGICAL_AND_EXPRESSION_*"
,"||_LOGICAL_AND_EXPRESSION_* -->"
,"&&_INCLUSIVE_OR_EXPRESSION_* --> && INCLUSIVE_OR_EXPRESSION &&_INCLUSIVE_OR_EXPRESSION_*"
,"&&_INCLUSIVE_OR_EXPRESSION_* -->"
,"|_EXCLUSIVE_OR_EXPRESSION_* --> | EXCLUSIVE_OR_EXPRESSION |_EXCLUSIVE_OR_EXPRESSION_*"
,"|_EXCLUSIVE_OR_EXPRESSION_* -->"
,"^_AND_EXPRESSION_* --> ^ AND_EXPRESSION ^_AND_EXPRESSION_*"
,"^_AND_EXPRESSION_* -->"
,"&_EQUALITY_EXPRESSION_* --> & EQUALITY_EXPRESSION &_EQUALITY_EXPRESSION_*"
,"&_EQUALITY_EXPRESSION_* -->"
,"EQUALITY_OP_RELATIONAL_EXPRESSION_* --> EQUALITY_OP RELATIONAL_EXPRESSION EQUALITY_OP_RELATIONAL_EXPRESSION_*"
,"EQUALITY_OP_RELATIONAL_EXPRESSION_* -->"
,"RELATIONAL_OP_SHIFT_EXPRESSION_* --> RELATIONAL_OP SHIFT_EXPRESSION RELATIONAL_OP_SHIFT_EXPRESSION_*"
,"RELATIONAL_OP_SHIFT_EXPRESSION_* -->"
,"SHIFT_OP_ADDITIVE_EXPRESSION_* --> SHIFT_OP ADDITIVE_EXPRESSION SHIFT_OP_ADDITIVE_EXPRESSION_*"
,"SHIFT_OP_ADDITIVE_EXPRESSION_* -->"
,"ADDITIVE_OP_MULTIPLICITIVE_EXPRESSION_* --> ADDITIVE_OP MULTIPLICITIVE_EXPRESSION ADDITIVE_OP_MULTIPLICITIVE_EXPRESSION_*"
,"ADDITIVE_OP_MULTIPLICITIVE_EXPRESSION_* -->"
,"MULTIPLICITIVE_OP_CAST_EXPRESSION_* --> MULTIPLICITIVE_OP CAST_EXPRESSION MULTIPLICITIVE_OP_CAST_EXPRESSION_*"
,"MULTIPLICITIVE_OP_CAST_EXPRESSION_* -->"
,"::_TYPEDEF_NAME_2_opt --> :: TYPEDEF_NAME"
,"::_TYPEDEF_NAME_2_opt -->"
,"ARGUMENT_EXPRESSION_LIST_opt --> ARGUMENT_EXPRESSION_LIST"
,"ARGUMENT_EXPRESSION_LIST_opt -->"
,"ARGUMENT_EXPRESSION_LIST_2_opt --> ARGUMENT_EXPRESSION_LIST"
,"ARGUMENT_EXPRESSION_LIST_2_opt -->"
,"STRING_* --> STRING STRING_*"
,"STRING_* -->"
,",_ASSIGNMENT_EXPRESSION_2_* --> , ASSIGNMENT_EXPRESSION ,_ASSIGNMENT_EXPRESSION_2_*"
,",_ASSIGNMENT_EXPRESSION_2_* -->"
,"ADDITIVE_OP_MUL_EXPRESSION_* --> ADDITIVE_OP MUL_EXPRESSION ADDITIVE_OP_MUL_EXPRESSION_*"
,"ADDITIVE_OP_MUL_EXPRESSION_* -->"
,"MULTIPLICITIVE_OP_UNARY_EXPR_* --> MULTIPLICITIVE_OP UNARY_EXPR MULTIPLICITIVE_OP_UNARY_EXPR_*"
,"MULTIPLICITIVE_OP_UNARY_EXPR_* -->"
};

private const short   START_SYMBOL = 105;
private const short   START_ACTION = 272;
private const short   END_ACTION = 278;

public static string  GetSymbolName ( short symbol )
{
  if ( symbol >= START_ACTION && symbol < END_ACTION ) {
      return ( Action_name [symbol - (START_ACTION-1)] );
  } else if ( symbol >= START_SYMBOL ) {
      return ( Nonterminal_name [symbol - (START_SYMBOL-1)] );
  } else if ( symbol > 0 ) {
      return ( Terminal_name [ symbol ] );
  }
  return ( "not a symbol" );
}

public static string  GetProductionName ( short production_number )
{
  return ( Production_name [production_number] );
}


};


}