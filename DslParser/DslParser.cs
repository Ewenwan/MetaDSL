// DslParser.cs - generated by the SLK parser generator
using Dsl.Common;

namespace Dsl.Parser
{

    static class DslParser
    {

private static short[] Production = {0

,2,47,48 ,3,48,49,98 ,3,49,66,136 ,3,50,67,136 ,3,51,68,136 
,3,52,69,136 ,3,53,70,136 ,3,54,71,136 ,3,55,72,136 
,3,56,73,136 ,3,57,74,136 ,3,58,75,136 ,3,59,76,136 
,3,60,77,136 ,3,61,78,136 ,3,62,79,136 ,3,63,80,136 
,3,64,81,136 ,3,65,82,136 ,3,66,67,99 ,3,67,68,100 
,3,68,69,101 ,3,69,70,102 ,3,70,71,103 ,3,71,72,104 
,3,72,73,105 ,3,73,74,106 ,3,74,75,107 ,3,75,76,108 
,3,76,77,109 ,3,77,78,110 ,3,78,79,111 ,3,79,80,112 
,3,80,81,113 ,3,81,82,114 ,3,82,84,115 ,3,83,84,136 
,3,84,141,85 ,2,85,116 ,4,85,142,87,117 ,4,86,96,143,118 
,2,87,88 ,6,88,144,18,48,19,119 ,6,88,146,20,48,21,120 
,4,88,22,89,121 ,4,88,23,90,122 ,4,88,24,91,123 ,6,88,147,25,48,19,124 
,6,88,148,26,48,21,125 ,6,88,149,27,48,28,126 ,4,88,29,92,127 
,4,88,30,93,128 ,4,88,31,94,129 ,4,88,32,95,130 ,6,88,150,33,48,28,131 
,5,88,151,34,152,132 ,6,88,153,35,48,36,133 ,6,88,154,37,48,38,134 
,6,88,155,39,48,40,135 ,7,89,156,141,142,96,157,136 ,5,89,158,18,48,19 
,5,89,159,20,48,21 ,5,89,160,33,48,28 ,7,90,161,141,142,96,157,136 
,5,90,162,18,48,19 ,5,90,163,20,48,21 ,5,90,164,33,48,28 
,7,91,165,141,142,96,157,136 ,7,92,166,141,142,96,157,136 
,7,93,167,141,142,96,157,136 ,7,94,168,141,142,96,157,136 
,7,95,169,141,142,96,157,136 ,3,96,41,137 ,3,96,42,170 
,3,96,43,171 ,2,97,44 ,2,97,45 ,4,98,97,49,98 ,1,98 
,6,99,1,137,138,50,99 ,1,99 ,6,100,2,137,138,51,100 
,1,100 ,6,101,3,137,138,52,101 ,1,101 ,10,102,4,137,139,53,4,137,140,53,102 
,1,102 ,6,103,5,137,138,54,103 ,1,103 ,6,104,6,137,138,55,104 
,1,104 ,6,105,7,137,138,56,105 ,1,105 ,6,106,8,137,138,57,106 
,1,106 ,6,107,9,137,138,58,107 ,1,107 ,6,108,10,137,138,59,108 
,1,108 ,6,109,11,137,138,60,109 ,1,109 ,6,110,12,137,138,61,110 
,1,110 ,6,111,13,137,138,62,111 ,1,111 ,6,112,14,137,138,63,112 
,1,112 ,6,113,15,137,138,64,113 ,1,113 ,6,114,16,137,138,65,114 
,1,114 ,6,115,17,137,138,83,115 ,1,115 ,4,116,142,86,116 
,1,116 ,4,117,142,86,117 ,1,117 ,2,118,88 ,1,118 ,3,119,145,88 
,1,119 ,3,120,145,88 ,1,120 ,3,121,145,88 ,1,121 ,3,122,145,88 
,1,122 ,3,123,145,88 ,1,123 ,3,124,145,88 ,1,124 ,3,125,145,88 
,1,125 ,3,126,145,88 ,1,126 ,3,127,145,88 ,1,127 ,3,128,145,88 
,1,128 ,3,129,145,88 ,1,129 ,3,130,145,88 ,1,130 ,3,131,145,88 
,1,131 ,3,132,145,88 ,1,132 ,3,133,145,88 ,1,133 ,3,134,145,88 
,1,134 ,3,135,145,88 ,1,135 
,0};

private static int[] Production_row = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,155,160,165,168,175,182,187,192,197
,204,211,218,223,228,233,238,245,251,258,265,272,280,286,292,298
,306,312,318,324,332,340,348,356,364,368,372,376,379,382,387,389
,396,398,405,407,414,416,427,429,436,438,445,447,454,456,463,465
,472,474,481,483,490,492,499,501,508,510,517,519,526,528,535,537
,544,546,551,553,558,560,563,565,569,571,575,577,581,583,587,589
,593,595,599,601,605,607,611,613,617,619,623,625,629,631,635,637
,641,643,647,649,653,655,659,661,665
,0};

private static short[] Parse = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,40,39,40,39,40,40,40,40,40,40,39,40,40,40,40,40,40,40
,39,40,39,40,39,39,39,39,39,39,39,119,119,119,119,119,119,119,119,119
,119,119,119,119,119,119,119,119,118,119,118,119,118,118,118,118,118,118,119,118
,118,118,118,118,118,118,119,118,119,118,119,119,119,119,119,119,119,121,121,121
,121,121,121,121,121,121,121,121,121,121,121,121,121,121,120,121,120,121,120,120
,120,120,120,120,121,120,120,120,120,120,120,120,121,120,121,120,121,121,121,121
,121,121,121,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123
,122,123,122,123,122,122,122,122,122,122,123,122,122,122,122,122,122,122,123,122
,123,122,123,123,123,123,123,123,123,125,125,125,125,125,125,125,125,125,125,125
,125,125,125,125,125,125,124,125,124,125,124,124,124,124,124,124,125,124,124,124
,124,124,124,124,125,124,125,124,125,125,125,125,125,125,125,127,127,127,127,127
,127,127,127,127,127,127,127,127,127,127,127,127,126,127,126,127,126,126,126,126
,126,126,127,126,126,126,126,126,126,126,127,126,127,126,127,127,127,127,127,127
,127,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,128,129
,128,129,128,128,128,128,128,128,129,128,128,128,128,128,128,128,129,128,129,128
,129,129,129,129,129,129,129,131,131,131,131,131,131,131,131,131,131,131,131,131
,131,131,131,131,130,131,130,131,130,130,130,130,130,130,131,130,130,130,130,130
,130,130,131,130,131,130,131,131,131,131,131,131,131,133,133,133,133,133,133,133
,133,133,133,133,133,133,133,133,133,133,132,133,132,133,132,132,132,132,132,132
,133,132,132,132,132,132,132,132,133,132,133,132,133,133,133,133,133,133,133,135
,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,134,135,134,135
,134,134,134,134,134,134,135,134,134,134,134,134,134,134,135,134,135,134,135,135
,135,135,135,135,135,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137
,137,137,136,137,136,137,136,136,136,136,136,136,137,136,136,136,136,136,136,136
,137,136,137,136,137,137,137,137,137,137,137,139,139,139,139,139,139,139,139,139
,139,139,139,139,139,139,139,139,138,139,138,139,138,138,138,138,138,138,139,138
,138,138,138,138,138,138,139,138,139,138,139,139,139,139,139,139,139,141,141,141
,141,141,141,141,141,141,141,141,141,141,141,141,141,141,140,141,140,141,140,140
,140,140,140,140,141,140,140,140,140,140,140,140,141,140,141,140,141,141,141,141
,141,141,141,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143
,142,143,142,143,142,142,142,142,142,142,143,142,142,142,142,142,142,142,143,142
,143,142,143,143,143,143,143,143,143,145,145,145,145,145,145,145,145,145,145,145
,145,145,145,145,145,145,144,145,144,145,144,144,144,144,144,144,145,144,144,144
,144,144,144,144,145,144,145,144,145,145,145,145,145,145,145,147,147,147,147,147
,147,147,147,147,147,147,147,147,147,147,147,147,146,147,146,147,146,146,146,146
,146,146,147,146,146,146,146,146,146,146,147,146,147,146,147,147,147,147,147,147
,147,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,148,149
,148,149,148,148,148,148,148,148,149,148,148,148,148,148,148,148,149,148,149,148
,149,149,149,149,149,149,149,151,151,151,151,151,151,151,151,151,151,151,151,151
,151,151,151,151,150,151,150,151,150,150,150,150,150,150,151,150,150,150,150,150
,150,150,151,150,151,150,151,151,151,151,151,151,151,153,153,153,153,153,153,153
,153,153,153,153,153,153,153,153,153,153,152,153,152,153,152,152,152,152,152,152
,153,152,152,152,152,152,152,152,153,152,153,152,153,153,153,153,153,153,153,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0
,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1
,1,1,1,1,1,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115
,115,115,42,115,42,115,42,42,42,42,42,42,115,42,42,42,42,42,42,42
,115,42,115,42,115,114,114,114,115,115,115,117,117,117,117,117,117,117,117,117
,117,117,117,117,117,117,117,117,43,117,44,117,45,46,47,48,49,50,117,51
,52,53,54,55,56,57,117,58,117,59,117,116,116,116,117,117,117,113,113,113
,113,113,113,113,113,113,113,113,113,113,113,113,113,112,61,113,62,113,41,41
,41,68,68,68,113,69,69,69,0,63,76,77,113,0,113,0,113,60,60,60
,113,113,113,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,110,0
,65,111,66,111,70,70,70,71,71,71,111,72,72,72,0,67,0,0,111,0
,111,0,111,64,64,64,111,111,111,109,109,109,109,109,109,109,109,109,109,109
,109,109,109,108,79,0,79,109,0,109,73,74,75,79,0,0,109,0,0,0
,0,79,0,79,109,79,109,0,109,78,78,79,109,109,109,107,107,107,107,107
,107,107,107,107,107,107,107,107,106,0,0,0,0,107,0,107,0,0,0,0
,0,0,107,0,0,0,0,0,0,0,107,0,107,0,107,0,0,0,107,107
,107,105,105,105,105,105,105,105,105,105,105,105,105,104,0,0,0,0,0,105
,0,105,0,0,0,0,0,0,105,0,0,0,0,0,0,0,105,0,105,0
,105,0,0,0,105,105,105,103,103,103,103,103,103,103,103,103,103,103,102,0
,0,0,0,0,0,103,0,103,0,0,0,0,0,0,103,0,0,0,0,0
,0,0,103,0,103,0,103,0,0,0,103,103,103,101,101,101,101,101,101,101
,101,101,101,100,0,0,0,0,0,0,0,101,0,101,0,0,0,0,0,0
,101,0,0,0,0,0,0,0,101,0,101,0,101,0,0,0,101,101,101,99
,99,99,99,99,99,99,99,99,98,0,0,0,0,0,0,0,0,99,0,99
,0,0,0,0,0,0,99,0,0,0,0,0,0,0,99,0,99,0,99,0
,0,0,99,99,99,97,97,97,97,97,97,97,97,96,0,0,0,0,0,0
,0,0,0,97,0,97,0,0,0,0,0,0,97,0,0,0,0,0,0,0
,97,0,97,0,97,0,0,0,97,97,97,95,95,95,95,95,95,95,94,0
,0,0,93,93,93,93,93,93,92,95,0,95,0,0,0,0,0,0,95,0
,93,0,93,0,0,0,95,0,95,93,95,0,0,0,95,95,95,93,0,93
,0,93,0,0,0,93,93,93,91,91,91,91,91,90,0,0,0,0,0,89
,89,89,89,88,0,0,91,0,91,0,87,87,87,86,0,91,0,89,0,89
,0,0,0,91,0,91,89,91,87,0,87,91,91,91,89,0,89,87,89,85
,85,84,89,89,89,87,0,87,0,87,83,82,0,87,87,87,0,85,0,85
,0,80,0,0,0,0,85,0,83,0,83,0,0,0,85,0,85,83,85,81
,0,81,85,85,85,83,0,83,81,83,0,0,0,83,83,83,81,0,81,0
,81,0,0,0,81,81,81
};

private static int[] Parse_row = {0

,2577,1,47,93,139,185,231,277,323,369,415,461,507,553,599,645
,691,737,783,829,875,921,967,1013,1059,1105,1151,1197,1243,1289,1335,1381
,1427,1473,1519,1565,1611,1657,1703,2696,2623,2669,2715,2761,2699,2703,2742,2745
,2749,2788,2705,2804,3259,3248,3237,3208,3197,3186,3140,3129,3083,3037,2991,2945
,2899,2853,2807,2761,2715,2623,2669,1749,1795,1841,1887,1933,1979,2025,2071,2117
,2163,2209,2255,2301,2347,2393,2439,2485,2531
,0};

private static short[] Conflict = {

0
};

private static int[] Conflict_row = {0


,0};

private static short get_conditional_production ( short symbol ) { return (short) 0; }

private const short   END_OF_SLK_INPUT_ = 46;
private const short   START_SYMBOL = 47;
private const short   START_STATE = 0;
private const short   START_CONFLICT = 154;
private const short   END_CONFLICT = 154;
private const short   START_ACTION = 136;
private const short   END_ACTION = 172;
private const short   TOTAL_CONFLICTS = 0;

public const int   NOT_A_SYMBOL = 0;
public const int   NONTERMINAL_SYMBOL = 1;
public const int   TERMINAL_SYMBOL = 2;
public const int   ACTION_SYMBOL = 3;

public static short[]
GetProductionArray ( short  production_number )
{
   short   index = (short)  Production_row [ production_number ],
           array_length = (short)  Production [ index ],
           new_index = 0;
   short[] productionArray = new short[17];        

   while ( array_length-- >= 0 ) {
       productionArray [ new_index++ ] = Production [ index++ ];
   }
   return  productionArray;
}

public static int GetSymbolType ( short   symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

public static bool    IsNonterminal ( short   symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

public static bool    IsTerminal ( short   symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

public static bool    IsAction ( short   symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

public static short GetTerminalIndex ( short   token ){
 return ( token );
}

public static short
get_production ( short     conflict_number,
                 DslToken  tokens )
{
    short   entry = 0;
    int     index, level;

    if ( conflict_number <= TOTAL_CONFLICTS ) {
        entry = (short) ( conflict_number + (START_CONFLICT - 1) );
        level = 1;
        while ( entry >= START_CONFLICT ) {
            index = Conflict_row [entry - (START_CONFLICT -1)];
            index += tokens.peek ( level );
            entry = Conflict [ index ];
            ++level;
        }
    }

    return  entry;
}

private static short
get_predicted_entry ( DslToken   tokens,
                      short      production_number,
                      short      token,
                      int        scan_level,
                      int        depth )
{
 return  0;
}

        internal unsafe static void
        parse(ref DslAction action,
                ref DslToken tokens,
                ref DslError error,
                short start_symbol)
        {
            short rhs, lhs;
            short production_number, entry, symbol, token, new_token;
            int production_length, top, index, level;
            
            short* stack = stackalloc short[65535];

            top = 65534;
            stack[top] = 0;
            if (start_symbol == 0) {
                start_symbol = START_SYMBOL;
            }
            if (top > 0) {
                stack[--top] = start_symbol;
            } else { error.message("DslParse: stack overflow\n", ref tokens); return; }
            token = tokens.get();
            new_token = token;

            for (symbol = (stack[top] != 0 ? stack[top++] : (short)0); symbol != 0; ) {

                if (symbol >= START_ACTION) {
                    action.execute(symbol - (START_ACTION - 1));

                } else if (symbol >= START_SYMBOL) {
                    entry = 0;
                    level = 1;
                    production_number = get_conditional_production(symbol);
                    if (production_number != 0) {
                        entry = get_predicted_entry(tokens,
                                                      production_number, token,
                                                      level, 1);
                    }
                    if (entry == 0) {
                        index = Parse_row[symbol - (START_SYMBOL - 1)];
                        index += token;
                        entry = Parse[index];
                    }
                    while (entry >= START_CONFLICT) {
                        index = Conflict_row[entry - (START_CONFLICT - 1)];
                        index += tokens.peek(level);
                        entry = Conflict[index];
                        ++level;
                    }
                    if (entry != 0) {
                        index = Production_row[entry];
                        production_length = Production[index] - 1;
                        lhs = Production[++index];
                        if (lhs == symbol) {
                            action.predict(entry);
                            index += production_length;
                            for (; production_length-- > 0; --index) {
                                if (top > 0) {
                                    stack[--top] = Production[index];
                                } else { error.message("DslParse: stack overflow\n", ref tokens); return; }
                            }
                        } else {
                            new_token = error.no_entry(symbol, token, level - 1, ref tokens);
                        }
                    } else {                                       // no table entry
                        new_token = error.no_entry(symbol, token, level - 1, ref tokens);
                    }
                } else if (symbol > 0) {
                    if (symbol == token) {
                        token = tokens.get();
                        new_token = token;
                    } else {
                        new_token = error.mismatch(symbol, token, ref tokens);
                    }
                } else {
                    error.message("\n parser error: symbol value 0\n", ref tokens);
                }
                if (token != new_token) {
                    if (new_token != 0) {
                        token = new_token;
                    }
                    if (token != END_OF_SLK_INPUT_) {
                        continue;
                    }
                }
                symbol = (stack[top] != 0 ? stack[top++] : (short)0);
            }
            if (token != END_OF_SLK_INPUT_) {
                error.input_left(ref tokens);
            }
        }
    };
}
