
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = {0

,2,32,33 ,3,33,34,78 ,3,34,51,103 ,3,35,52,103 ,3,36,53,103 
,3,37,54,103 ,3,38,55,103 ,3,39,56,103 ,3,40,57,103 
,3,41,58,103 ,3,42,59,103 ,3,43,60,103 ,3,44,61,103 
,3,45,62,103 ,3,46,63,103 ,3,47,64,103 ,3,48,65,103 
,3,49,66,103 ,3,50,67,103 ,3,51,52,79 ,3,52,53,80 
,3,53,54,81 ,3,54,55,82 ,3,55,56,83 ,3,56,57,84 
,3,57,58,85 ,3,58,59,86 ,3,59,60,87 ,3,60,61,88 
,3,61,62,89 ,3,62,63,90 ,3,63,64,91 ,3,64,65,92 
,3,65,66,93 ,3,66,67,94 ,3,67,69,95 ,3,68,69,103 
,3,69,109,70 ,2,70,96 ,4,70,110,72,111 ,5,71,76,112,97,98 
,3,72,74,99 ,2,72,73 ,5,73,113,18,33,19 ,4,73,114,20,115 
,6,74,116,21,33,22,100 ,6,74,118,23,33,24,101 ,5,74,119,25,75,102 
,8,75,120,109,110,76,121,111,103 ,5,75,122,21,33,22 ,5,75,123,23,33,24 
,5,75,124,18,33,19 ,3,76,26,105 ,3,76,27,125 ,3,76,28,126 
,2,77,29 ,2,77,30 ,4,78,77,34,78 ,1,78 ,7,79,104,1,105,106,35,79 
,1,79 ,11,80,104,2,105,107,36,2,105,108,36,80 ,1,80 
,7,81,104,3,105,106,37,81 ,1,81 ,7,82,104,4,105,106,38,82 
,1,82 ,7,83,104,5,105,106,39,83 ,1,83 ,7,84,104,6,105,106,40,84 
,1,84 ,7,85,104,7,105,106,41,85 ,1,85 ,7,86,104,8,105,106,42,86 
,1,86 ,7,87,104,9,105,106,43,87 ,1,87 ,7,88,104,10,105,106,44,88 
,1,88 ,7,89,104,11,105,106,45,89 ,1,89 ,7,90,104,12,105,106,46,90 
,1,90 ,7,91,104,13,105,106,47,91 ,1,91 ,7,92,104,14,105,106,48,92 
,1,92 ,7,93,104,15,105,106,49,93 ,1,93 ,7,94,104,16,105,106,50,94 
,1,94 ,7,95,104,17,105,106,68,95 ,1,95 ,5,96,110,71,111,96 
,1,96 ,2,97,74 ,1,97 ,2,98,73 ,1,98 ,2,99,73 ,1,99 
,3,100,117,74 ,1,100 ,3,101,117,74 ,1,101 ,3,102,117,74 
,1,102 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,155,160,166,170,173,179,184,191,198
,204,213,219,225,231,235,239,243,246,249,254,256,264,266,278,280
,288,290,298,300,308,310,318,320,328,330,338,340,348,350,358,360
,368,370,378,380,388,390,398,400,408,410,418,420,428,430,436,438
,441,443,446,448,451,453,457,459,463,465,469
,0};

static slk_size_t Parse[] = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39
,39,39,39,39,39,39,39,40,39,40,40,39,40,39,40,39,39,39,39,39
,39,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97
,97,96,97,96,97,96,97,97,97,97,97,97,103,103,103,103,103,103,103,103
,103,103,103,103,103,103,103,103,103,103,103,103,102,103,102,103,102,103,103,103
,103,103,103,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105
,105,105,105,104,105,104,105,104,105,105,105,105,105,105,107,107,107,107,107,107
,107,107,107,107,107,107,107,107,107,107,107,107,107,107,106,107,106,107,106,107
,107,107,107,107,107,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
,1,1,1,0,1,1,44,1,45,1,1,1,1,1,1,1,99,99,99,99
,99,99,99,99,99,99,99,99,99,99,99,99,99,98,99,98,46,99,47,99
,48,99,99,99,99,99,99,95,95,95,95,95,95,95,95,95,95,95,95,95
,95,95,95,95,43,95,43,42,95,42,95,42,94,94,94,95,95,95,101,101
,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,100,101,100,0,101
,0,101,41,41,41,0,101,101,101,93,93,93,93,93,93,93,93,93,93,93
,93,93,93,93,93,92,52,93,0,50,93,51,93,0,49,49,49,93,93,93
,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,90,56,57,91,0
,0,91,0,91,53,54,55,0,91,91,91,89,89,89,89,89,89,89,89,89
,89,89,89,89,89,88,0,0,0,89,0,0,89,0,89,0,0,0,60,89
,89,89,87,87,87,87,87,87,87,87,87,87,87,87,87,86,61,0,0,61
,87,61,0,87,0,87,61,61,61,0,87,87,87,85,85,85,85,85,85,85
,85,85,85,85,85,84,0,59,0,0,59,85,59,0,85,0,85,58,58,59
,0,85,85,85,83,83,83,83,83,83,83,83,83,83,83,82,0,0,0,0
,0,0,83,0,0,83,0,83,0,0,0,0,83,83,83,81,81,81,81,81
,81,81,81,81,81,80,0,0,0,0,0,0,0,81,0,0,81,0,81,0
,0,0,0,81,81,81,79,79,79,79,79,79,79,79,79,78,0,0,0,0
,0,0,0,0,79,0,0,79,0,79,0,0,0,0,79,79,79,77,77,77
,77,77,77,77,77,76,0,0,0,0,0,0,0,0,0,77,0,0,77,0
,77,0,0,0,0,77,77,77,75,75,75,75,75,75,75,74,0,0,0,0
,0,0,0,0,0,0,75,0,0,75,0,75,0,0,0,0,75,75,75,73
,73,73,73,73,73,72,0,0,0,0,0,0,0,0,0,0,0,73,0,0
,73,0,73,0,0,0,0,73,73,73,71,71,71,71,71,70,0,0,0,0
,0,0,0,69,69,69,69,68,71,0,0,71,0,71,0,0,0,0,71,71
,71,69,0,0,69,0,69,67,67,67,66,69,69,69,0,0,0,0,0,0
,65,65,64,0,0,67,0,0,67,0,67,0,0,63,62,67,67,67,65,0
,0,65,0,65,0,0,0,0,65,65,65,63,0,0,63,0,63,0,0,0
,0,63,63,63
};

static slk_size_t Parse_row[] = {0

,1303,1,32,63,94,125,156,187,218,249,280,311,342,373,404,435
,466,497,528,559,590,621,652,683,714,745,776,807,838,869,900,931
,962,993,1024,1055,1086,1117,1148,1395,1365,1307,1334,1427,1457,1446,1547,1516
,1831,1818,1805,1781,1768,1737,1706,1675,1644,1613,1582,1551,1520,1489,1458,1427
,1365,1179,1334,1396,1210,1241,1272
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 32
#define END_OF_SLK_INPUT_ 31
#define START_STATE 0
#define START_CONFLICT 108
#define END_CONFLICT 108
#define START_ACTION 103
#define END_ACTION 127
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 512
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) *--top = symbol
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)            self.peek(a)
#define get(self)               self.get()
#define mismatch(self,a,b)      self.mismatch(a,b)
#define no_entry(self,a,b,c)    self.no_entry(a,b,c)
#define input_left(self)        self.input_left()
#define message(self,a)         self.message(a)
#define predict(self,a)         self.predict(a)
#define reduce(self,a)          self.reduce(a)
#define state(self,a)           self.state(a)
#define execute(self,a)         self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType ( slk_size_t symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

slk_size_t *SlkGetProductionArray ( slk_size_t   production_number )
{
    return   &Production [ Production_row [production_number] ];
}

int SlkIsNonterminal ( slk_size_t symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

int SlkIsTerminal ( slk_size_t symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

int SlkIsAction ( slk_size_t symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

void SlkParse ( SlkAction  &action, 
                SlkToken   &tokens, 
                SlkError   &error, 
                slk_size_t  start_symbol ) 
{
 register
 slk_size_t  *top, *production;
 slk_size_t   production_number, entry, symbol, token, new_token;
 int          production_length, index, level;
 slk_size_t   stack [ PARSE_STACK_SIZE ];

 top = stack + (PARSE_STACK_SIZE-1);
 *top = 0;
 if ( ! start_symbol ) {
     start_symbol = START_SYMBOL;
 }
 SLK_PUSH ( start_symbol, stack, top );
 token = get(tokens);
 new_token = token;

 for ( symbol = SLK_POP ( top );  symbol;  ) {

     if ( symbol >= START_ACTION ) {
         execute ( action, (symbol-(START_ACTION-1)) );

     } else if ( symbol >= START_SYMBOL ) {
         entry = 0;
         level = 1;
         production_number = GET_CONDITIONAL_PRODUCTION ( symbol );
         if ( production_number ) {
             entry = get_predicted_entry ( tokens,
                                           production_number, token,
                                           level, 1 );
         }
         if ( ! entry ) {
             index = Parse_row [symbol - (START_SYMBOL-1)];
             index += token;
             entry = Parse [ index ];
         }
         while ( entry >= START_CONFLICT ) {
             index = Conflict_row [entry - (START_CONFLICT -1)];
             index += peek (tokens, level);
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry ) {
             production = &Production [ Production_row [entry] ];
             production_length = *production - 1;
             if ( *++production == symbol ) {
                 predict ( action, entry );
                 production += production_length;
                 for (;  production_length-- > 0;  --production ) {
                     SLK_PUSH ( *production, stack, top );
                 }
             } else {
                 new_token = no_entry ( error, symbol, token, level-1 );
             }
         } else {
             new_token = no_entry ( error, symbol, token, level-1 );
         }
     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = get(tokens);
             new_token = token;
         } else {
             new_token = mismatch ( error, symbol, token );
         }
     }
     if ( token != new_token ) {
         if ( new_token ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }
     symbol = SLK_POP ( top );
 }
 if ( token != END_OF_SLK_INPUT_ ) {
     input_left ( error );
 }
}

