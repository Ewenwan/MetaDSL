
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = {0

,2,40,41 ,3,41,42,91 ,3,42,59,121 ,3,43,60,121 ,3,44,61,121 
,3,45,62,121 ,3,46,63,121 ,3,47,64,121 ,3,48,65,121 
,3,49,66,121 ,3,50,67,121 ,3,51,68,121 ,3,52,69,121 
,3,53,70,121 ,3,54,71,121 ,3,55,72,121 ,3,56,73,121 
,3,57,74,121 ,3,58,75,121 ,3,59,60,92 ,3,60,61,93 
,3,61,62,94 ,3,62,63,95 ,3,63,64,96 ,3,64,65,97 
,3,65,66,98 ,3,66,67,99 ,3,67,68,100 ,3,68,69,101 
,3,69,70,102 ,3,70,71,103 ,3,71,72,104 ,3,72,73,105 
,3,73,74,106 ,3,74,75,107 ,3,75,77,108 ,3,76,77,121 
,3,77,127,78 ,2,78,109 ,4,78,128,80,129 ,5,79,89,130,110,111 
,3,80,82,112 ,2,80,81 ,5,81,131,18,41,19 ,4,81,132,20,133 
,6,82,134,21,41,22,113 ,6,82,136,23,41,24,114 ,5,82,137,25,83,115 
,5,82,138,26,84,116 ,6,82,138,139,27,41,22 ,6,82,138,140,28,41,24 
,6,82,138,141,29,41,19 ,5,82,142,30,85,117 ,5,82,137,31,86,118 
,5,82,138,32,87,119 ,5,82,142,33,88,120 ,8,83,143,127,128,89,144,129,121 
,5,83,145,21,41,22 ,5,83,146,23,41,24 ,5,83,147,18,41,19 
,8,84,148,127,128,89,144,129,121 ,8,85,149,127,128,89,144,129,121 
,8,86,150,127,128,89,144,129,121 ,8,87,151,127,128,89,144,129,121 
,8,88,152,127,128,89,144,129,121 ,3,89,34,123 ,3,89,35,153 
,3,89,36,154 ,2,90,37 ,2,90,38 ,4,91,90,42,91 ,1,91 
,7,92,122,1,123,124,43,92 ,1,92 ,7,93,122,2,123,124,44,93 
,1,93 ,7,94,122,3,123,124,45,94 ,1,94 ,7,95,122,4,123,124,46,95 
,1,95 ,11,96,122,5,123,125,47,5,123,126,47,96 ,1,96 
,7,97,122,6,123,124,48,97 ,1,97 ,7,98,122,7,123,124,49,98 
,1,98 ,7,99,122,8,123,124,50,99 ,1,99 ,7,100,122,9,123,124,51,100 
,1,100 ,7,101,122,10,123,124,52,101 ,1,101 ,7,102,122,11,123,124,53,102 
,1,102 ,7,103,122,12,123,124,54,103 ,1,103 ,7,104,122,13,123,124,55,104 
,1,104 ,7,105,122,14,123,124,56,105 ,1,105 ,7,106,122,15,123,124,57,106 
,1,106 ,7,107,122,16,123,124,58,107 ,1,107 ,7,108,122,17,123,124,76,108 
,1,108 ,5,109,128,79,129,109 ,1,109 ,2,110,82 ,1,110 ,2,111,81 
,1,111 ,2,112,81 ,1,112 ,3,113,135,82 ,1,113 ,3,114,135,82 
,1,114 ,3,115,135,82 ,1,115 ,3,116,135,82 ,1,116 ,3,117,135,82 
,1,117 ,3,118,135,82 ,1,118 ,3,119,135,82 ,1,119 ,3,120,135,82 
,1,120 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,80,84,88,92,96,100,104,108,112,116,120,124
,128,132,136,140,144,148,152,155,160,166,170,173,179,184,191,198
,204,210,217,224,231,237,243,249,255,264,270,276,282,291,300,309
,318,327,331,335,339,342,345,350,352,360,362,370,372,380,382,390
,392,404,406,414,416,424,426,434,436,444,446,454,456,464,466,474
,476,484,486,494,496,504,506,514,516,524,526,532,534,537,539,542
,544,547,549,553,555,559,561,565,567,571,573,577,579,583,585,589
,591,595
,0};

static slk_size_t Parse[] = {

0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20
,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21
,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39
,39,39,39,40,39,40,40,39,40,39,40,40,40,40,40,40,40,40,40,39
,39,39,39,39,39,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110
,110,110,110,110,110,109,110,109,110,109,109,109,109,109,109,109,109,109,110,110
,110,110,110,110,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116
,116,116,116,116,115,116,115,116,115,115,115,115,115,115,115,115,115,116,116,116
,116,116,116,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118
,118,118,118,117,118,117,118,117,117,117,117,117,117,117,117,117,118,118,118,118
,118,118,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120
,120,120,119,120,119,120,119,119,119,119,119,119,119,119,119,120,120,120,120,120
,120,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122
,122,121,122,121,122,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122
,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124
,123,124,123,124,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,126
,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,125
,126,125,126,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,128,128
,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,127,128
,127,128,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,130,130,130
,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,129,130,129
,130,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,1,1,1,1
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,44,1,45
,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,112,112,112,112,112
,112,112,112,112,112,112,112,112,112,112,112,112,111,112,111,46,112,47,112,48
,49,50,51,52,53,54,55,56,112,112,112,112,112,112,108,108,108,108,108,108
,108,108,108,108,108,108,108,108,108,108,108,43,108,43,42,108,42,108,42,42
,42,42,42,42,42,42,42,107,107,107,108,108,108,114,114,114,114,114,114,114
,114,114,114,114,114,114,114,114,114,114,113,114,113,0,114,0,114,41,41,41
,61,61,61,62,62,62,63,63,63,114,114,114,106,106,106,106,106,106,106,106
,106,106,106,106,106,106,106,106,105,60,106,0,58,106,59,106,64,64,64,65
,65,65,66,67,68,57,57,57,106,106,106,104,104,104,104,104,104,104,104,104
,104,104,104,104,104,104,103,69,70,104,0,0,104,0,104,0,0,0,0,0
,0,0,0,0,0,0,0,104,104,104,102,102,102,102,102,102,102,102,102,102
,102,102,102,102,101,0,0,0,102,0,0,102,0,102,0,0,0,0,0,0
,0,0,0,0,0,73,102,102,102,100,100,100,100,100,100,100,100,100,100,100
,100,100,99,74,0,0,74,100,74,0,100,0,100,0,0,0,0,0,0,0
,0,74,74,74,0,100,100,100,98,98,98,98,98,98,98,98,98,98,98,98
,97,0,0,0,0,0,98,0,0,98,0,98,96,96,96,96,96,96,96,96
,96,96,96,95,98,98,98,0,0,0,96,0,0,96,0,96,94,94,94,94
,94,94,94,94,94,94,93,0,96,96,96,0,0,0,94,0,0,94,0,94
,92,92,92,92,92,92,92,92,92,91,0,0,94,94,94,0,0,0,92,0
,0,92,0,92,90,90,90,90,90,90,90,90,89,0,0,0,92,92,92,0
,0,0,90,0,0,90,0,90,88,88,88,88,88,88,88,87,0,0,0,0
,90,90,90,0,0,0,88,0,0,88,0,88,86,86,86,86,86,86,85,0
,0,0,0,0,88,88,88,0,0,0,86,0,0,86,0,86,84,84,84,84
,84,83,82,82,82,82,81,0,86,86,86,0,0,0,84,0,0,84,0,84
,82,0,0,82,0,82,80,80,80,79,0,0,84,84,84,78,78,77,82,82
,82,0,0,0,80,0,0,80,0,80,0,0,0,78,0,0,78,0,78,76
,75,0,80,80,80,72,0,0,72,0,72,78,78,78,0,0,0,76,0,0
,76,0,76,71,71,72,0,0,0,0,0,0,0,0,0,76,76,76
};

static slk_size_t Parse_row[] = {0

,1834,1,40,79,118,157,196,235,274,313,352,391,430,469,508,547
,586,625,664,703,742,781,820,859,898,937,976,1015,1054,1093,1132,1171
,1210,1249,1288,1327,1366,1405,1444,1942,1912,1838,1873,1990,1945,1948,1951,1981
,1984,1987,2009,2365,2103,2377,2353,2344,2320,2314,2290,2266,2242,2218,2194,2170
,2146,2107,2068,2029,1990,1912,1483,1873,1951,1522,1561,1600,1639,1678,1717,1756
,1795
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 40
#define END_OF_SLK_INPUT_ 39
#define START_STATE 0
#define START_CONFLICT 131
#define END_CONFLICT 131
#define START_ACTION 121
#define END_ACTION 155
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 512
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) *--top = symbol
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)            self.peek(a)
#define get(self)               self.get()
#define mismatch(self,a,b)      self.mismatch(a,b)
#define no_entry(self,a,b,c)    self.no_entry(a,b,c)
#define input_left(self)        self.input_left()
#define message(self,a)         self.message(a)
#define predict(self,a)         self.predict(a)
#define reduce(self,a)          self.reduce(a)
#define state(self,a)           self.state(a)
#define execute(self,a)         self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType ( slk_size_t symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

slk_size_t *SlkGetProductionArray ( slk_size_t   production_number )
{
    return   &Production [ Production_row [production_number] ];
}

int SlkIsNonterminal ( slk_size_t symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

int SlkIsTerminal ( slk_size_t symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

int SlkIsAction ( slk_size_t symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

void SlkParse ( SlkAction  &action, 
                SlkToken   &tokens, 
                SlkError   &error, 
                slk_size_t  start_symbol ) 
{
 register
 slk_size_t  *top, *production;
 slk_size_t   production_number, entry, symbol, token, new_token;
 int          production_length, index, level;
 slk_size_t   stack [ PARSE_STACK_SIZE ];

 top = stack + (PARSE_STACK_SIZE-1);
 *top = 0;
 if ( ! start_symbol ) {
     start_symbol = START_SYMBOL;
 }
 SLK_PUSH ( start_symbol, stack, top );
 token = get(tokens);
 new_token = token;

 for ( symbol = SLK_POP ( top );  symbol;  ) {

     if ( symbol >= START_ACTION ) {
         execute ( action, (symbol-(START_ACTION-1)) );

     } else if ( symbol >= START_SYMBOL ) {
         entry = 0;
         level = 1;
         production_number = GET_CONDITIONAL_PRODUCTION ( symbol );
         if ( production_number ) {
             entry = get_predicted_entry ( tokens,
                                           production_number, token,
                                           level, 1 );
         }
         if ( ! entry ) {
             index = Parse_row [symbol - (START_SYMBOL-1)];
             index += token;
             entry = Parse [ index ];
         }
         while ( entry >= START_CONFLICT ) {
             index = Conflict_row [entry - (START_CONFLICT -1)];
             index += peek (tokens, level);
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry ) {
             production = &Production [ Production_row [entry] ];
             production_length = *production - 1;
             if ( *++production == symbol ) {
                 predict ( action, entry );
                 production += production_length;
                 for (;  production_length-- > 0;  --production ) {
                     SLK_PUSH ( *production, stack, top );
                 }
             } else {
                 new_token = no_entry ( error, symbol, token, level-1 );
             }
         } else {
             new_token = no_entry ( error, symbol, token, level-1 );
         }
     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = get(tokens);
             new_token = token;
         } else {
             new_token = mismatch ( error, symbol, token );
         }
     }
     if ( token != new_token ) {
         if ( new_token ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }
     symbol = SLK_POP ( top );
 }
 if ( token != END_OF_SLK_INPUT_ ) {
     input_left ( error );
 }
}

